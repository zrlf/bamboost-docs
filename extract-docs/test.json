[
  {
    "name": "accessors",
    "description": null,
    "classes": [],
    "methods": [],
    "modules": [
      {
        "name": "fielddata",
        "description": null,
        "classes": [
          {
            "name": "DataGroup",
            "description": "This pointer points to the data directory. Item accessor returns the\nindividual data fields. `meshes` is passed to here for access of linked\nmeshes.",
            "methods": [
              {
                "signature": "datasets(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "groups(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "keys(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              }
            ]
          },
          {
            "name": "FieldData",
            "description": "This pointer points to a specific data field. `meshes` is passed to here\nfor access of linked meshes.",
            "methods": [
              {
                "signature": "at_step(self, *steps: 'int') -> 'np.ndarray'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "steps",
                    "type": "int",
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "np.ndarray",
                  "description": ":class:`np.ndarray`"
                }
              },
              {
                "signature": "datasets(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "groups(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "keys(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "regenerate_virtual_datasets(self) -> 'None'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "None",
                  "description": null
                }
              }
            ]
          }
        ],
        "methods": [
          {
            "signature": "with_file_open(mode: 'str' = 'r', driver=None, comm=None)",
            "arguments": [
              {
                "name": "mode",
                "type": "str",
                "default": "r",
                "description": null
              },
              {
                "name": "driver",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "comm",
                "type": null,
                "default": "None",
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          }
        ],
        "modules": []
      },
      {
        "name": "meshes",
        "description": null,
        "classes": [
          {
            "name": "Mesh",
            "description": "Pointer to a location in an hdf5 file. The constructor takes a\n:class:`~.file_handler.FileHandler` and the in-file path to the object.\nThe base class represents a generic group in the file\n\nArgs:\n    file_handler: file this belongs to\n    path_to_data: infile path to object",
            "methods": [
              {
                "signature": "datasets(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "get_tuple(self) -> 'Tuple[np.ndarray, np.ndarray]'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "Tuple[np.ndarray, np.ndarray]",
                  "description": null
                }
              },
              {
                "signature": "groups(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "keys(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              }
            ]
          },
          {
            "name": "MeshGroup",
            "description": "Pointer to a location in an hdf5 file. The constructor takes a\n:class:`~.file_handler.FileHandler` and the in-file path to the object.\nThe base class represents a generic group in the file\n\nArgs:\n    file_handler: file this belongs to\n    path_to_data: infile path to object",
            "methods": [
              {
                "signature": "datasets(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "groups(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "keys(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              }
            ]
          }
        ],
        "methods": [
          {
            "signature": "with_file_open(mode: 'str' = 'r', driver=None, comm=None)",
            "arguments": [
              {
                "name": "mode",
                "type": "str",
                "default": "r",
                "description": null
              },
              {
                "name": "driver",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "comm",
                "type": null,
                "default": "None",
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          }
        ],
        "modules": []
      }
    ]
  },
  {
    "name": "common",
    "description": null,
    "classes": [],
    "methods": [],
    "modules": [
      {
        "name": "file_handler",
        "description": null,
        "classes": [
          {
            "name": "FileHandler",
            "description": "File handler for an hdf5 file with the purpose of handling opening and closing\nof the file. We use the concept of composition to include an object of this type\nin classes which need access to an hdf5 file (such as the hdf5pointer and Simulation.)\n\nArgs:\n    file_name: the path to the file\n\nAttributes:\n    file_object: the h5py file object (accessible if open)\n    _lock: lock is kind of a stack. `open` increases the stack. `close` decreases\n        the stack. file_object is only closed if the stack is at 0. Ensures consecutive\n        method calls works. Would be a problem if the file is closed after each\n        sub-operation.\n    _mode: file mode\n    _driver: file driver\n    _comm: MPI communicator",
            "methods": [
              {
                "signature": "change_file_mode(self, mode: 'str', driver=None, comm=None)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "mode",
                    "type": "str",
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "driver",
                    "type": null,
                    "default": "None",
                    "description": null
                  },
                  {
                    "name": "comm",
                    "type": null,
                    "default": "None",
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              },
              {
                "signature": "close(self)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              },
              {
                "signature": "open(self, mode: 'str' = 'r', driver=None, comm=None)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "mode",
                    "type": "str",
                    "default": "r",
                    "description": null
                  },
                  {
                    "name": "driver",
                    "type": null,
                    "default": "None",
                    "description": null
                  },
                  {
                    "name": "comm",
                    "type": null,
                    "default": "None",
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              }
            ]
          }
        ],
        "methods": [
          {
            "signature": "capture_key_error(method)",
            "arguments": [
              {
                "name": "method",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "open_h5file(file: 'str', mode, driver=None, comm=None)",
            "arguments": [
              {
                "name": "file",
                "type": "str",
                "default": null,
                "description": "File to open"
              },
              {
                "name": "mode",
                "type": null,
                "default": null,
                "description": "'r', 'a', 'w', ..."
              },
              {
                "name": "driver",
                "type": null,
                "default": "None",
                "description": "driver for h5.File"
              },
              {
                "name": "comm",
                "type": null,
                "default": "None",
                "description": "MPI communicator"
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "with_file_open(mode: 'str' = 'r', driver=None, comm=None)",
            "arguments": [
              {
                "name": "mode",
                "type": "str",
                "default": "r",
                "description": null
              },
              {
                "name": "driver",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "comm",
                "type": null,
                "default": "None",
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))",
            "arguments": [
              {
                "name": "wrapped",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "assigned",
                "type": null,
                "default": "('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')",
                "description": null
              },
              {
                "name": "updated",
                "type": null,
                "default": "('__dict__',)",
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          }
        ],
        "modules": []
      },
      {
        "name": "git_utility",
        "description": null,
        "classes": [
          {
            "name": "GitStateGetter",
            "description": null,
            "methods": [
              {
                "signature": "create_git_string(self) -> str",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "<class 'str'>",
                  "description": null
                }
              }
            ]
          }
        ],
        "methods": [],
        "modules": []
      },
      {
        "name": "hdf_pointer",
        "description": null,
        "classes": [
          {
            "name": "BasePointer",
            "description": "Pointer to a location in an hdf5 file. The constructor takes a\n:class:`~.file_handler.FileHandler` and the in-file path to the object.\nThe base class represents a generic group in the file\n\nArgs:\n    file_handler: file this belongs to\n    path_to_data: infile path to object",
            "methods": []
          },
          {
            "name": "Dataset",
            "description": "Pointer to a location in an hdf5 file. The constructor takes a\n:class:`~.file_handler.FileHandler` and the in-file path to the object.\nThe base class represents a generic group in the file\n\nArgs:\n    file_handler: file this belongs to\n    path_to_data: infile path to object",
            "methods": []
          },
          {
            "name": "Group",
            "description": "Pointer to a location in an hdf5 file. The constructor takes a\n:class:`~.file_handler.FileHandler` and the in-file path to the object.\nThe base class represents a generic group in the file\n\nArgs:\n    file_handler: file this belongs to\n    path_to_data: infile path to object",
            "methods": [
              {
                "signature": "datasets(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "groups(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "keys(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              }
            ]
          },
          {
            "name": "MutableGroup",
            "description": "Used for the `userdata` group.",
            "methods": [
              {
                "signature": "add_dataset(self, name: 'str', vector: 'np.ndarray', attrs: 'dict' = None) -> 'None'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "name",
                    "type": "str",
                    "default": null,
                    "description": "Name for the dataset"
                  },
                  {
                    "name": "vector",
                    "type": "np.ndarray",
                    "default": null,
                    "description": "Data to write (max 2d)"
                  },
                  {
                    "name": "attrs",
                    "type": "dict",
                    "default": "None",
                    "description": "Optional. Attributes of dataset."
                  }
                ],
                "return": {
                  "type": "None",
                  "description": null
                }
              },
              {
                "signature": "datasets(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "groups(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "keys(self) -> 'set'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "set",
                  "description": null
                }
              },
              {
                "signature": "require_group(self, name: 'str') -> 'Group'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "name",
                    "type": "str",
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": "Group",
                  "description": ":class:`~bamboost.hdf_pointer.Group`"
                }
              },
              {
                "signature": "update_attrs(self, attrs: 'dict') -> 'None'",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "attrs",
                    "type": "dict",
                    "default": null,
                    "description": "the dictionary to write as attributes"
                  }
                ],
                "return": {
                  "type": "None",
                  "description": null
                }
              }
            ]
          }
        ],
        "methods": [
          {
            "signature": "with_file_open(mode: 'str' = 'r', driver=None, comm=None)",
            "arguments": [
              {
                "name": "mode",
                "type": "str",
                "default": "r",
                "description": null
              },
              {
                "name": "driver",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "comm",
                "type": null,
                "default": "None",
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          }
        ],
        "modules": []
      },
      {
        "name": "job",
        "description": null,
        "classes": [
          {
            "name": "Job",
            "description": null,
            "methods": [
              {
                "signature": "create_bash_script_local(self, commands: list, path: str, uid: str, ntasks: int = 4)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "commands",
                    "type": "<class 'list'>",
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "path",
                    "type": "<class 'str'>",
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "uid",
                    "type": "<class 'str'>",
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "ntasks",
                    "type": "<class 'int'>",
                    "default": "4",
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              },
              {
                "signature": "create_sbatch_script(self, commands: list, path: str, uid: str = None, nnodes: int = 1, ntasks: int = 4, ncpus: int = 1, time: str = '04:00:00', mem_per_cpu: int = 2048, tmp: int = 8000) -> None",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "commands",
                    "type": "<class 'list'>",
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "path",
                    "type": "<class 'str'>",
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "uid",
                    "type": "<class 'str'>",
                    "default": "None",
                    "description": null
                  },
                  {
                    "name": "nnodes",
                    "type": "<class 'int'>",
                    "default": "1",
                    "description": null
                  },
                  {
                    "name": "ntasks",
                    "type": "<class 'int'>",
                    "default": "4",
                    "description": null
                  },
                  {
                    "name": "ncpus",
                    "type": "<class 'int'>",
                    "default": "1",
                    "description": null
                  },
                  {
                    "name": "time",
                    "type": "<class 'str'>",
                    "default": "04:00:00",
                    "description": null
                  },
                  {
                    "name": "mem_per_cpu",
                    "type": "<class 'int'>",
                    "default": "2048",
                    "description": null
                  },
                  {
                    "name": "tmp",
                    "type": "<class 'int'>",
                    "default": "8000",
                    "description": null
                  }
                ],
                "return": {
                  "type": "None",
                  "description": null
                }
              }
            ]
          }
        ],
        "methods": [],
        "modules": []
      },
      {
        "name": "utilities",
        "description": "Utility functions used by bamboost.",
        "classes": [],
        "methods": [
          {
            "signature": "flatten_dict(dictionary, parent_key='', seperator='.')",
            "arguments": [
              {
                "name": "dictionary",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "parent_key",
                "type": null,
                "default": "",
                "description": null
              },
              {
                "name": "seperator",
                "type": null,
                "default": ".",
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "h5_tree(val, pre='')",
            "arguments": [
              {
                "name": "val",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "pre",
                "type": null,
                "default": "",
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "tree(dir_path: pathlib.Path, level: int = -1, limit_to_directories: bool = False, length_limit: int = 1000)",
            "arguments": [
              {
                "name": "dir_path",
                "type": "<class 'pathlib.Path'>",
                "default": null,
                "description": null
              },
              {
                "name": "level",
                "type": "<class 'int'>",
                "default": "-1",
                "description": null
              },
              {
                "name": "limit_to_directories",
                "type": "<class 'bool'>",
                "default": "False",
                "description": null
              },
              {
                "name": "length_limit",
                "type": "<class 'int'>",
                "default": "1000",
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "unflatten_dict(dictionary, seperator='.')",
            "arguments": [
              {
                "name": "dictionary",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "seperator",
                "type": null,
                "default": ".",
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          }
        ],
        "modules": []
      }
    ]
  },
  {
    "name": "index",
    "description": "Module to manage the database index and its ID's.",
    "classes": [],
    "methods": [
      {
        "signature": "clean() -> 'None'",
        "arguments": [],
        "return": {
          "type": "None",
          "description": null
        }
      },
      {
        "signature": "create_index() -> 'None'",
        "arguments": [],
        "return": {
          "type": "None",
          "description": null
        }
      },
      {
        "signature": "find(uid, root_dir) -> 'list'",
        "arguments": [
          {
            "name": "uid",
            "type": null,
            "default": null,
            "description": "UID to search for"
          },
          {
            "name": "root_dir",
            "type": null,
            "default": null,
            "description": "root directory for search"
          }
        ],
        "return": {
          "type": "list",
          "description": null
        }
      },
      {
        "signature": "get_index_dict() -> 'dict'",
        "arguments": [],
        "return": {
          "type": "dict",
          "description": null
        }
      },
      {
        "signature": "get_known_paths() -> 'list'",
        "arguments": [],
        "return": {
          "type": "list",
          "description": null
        }
      },
      {
        "signature": "get_path(uid: 'str') -> 'str'",
        "arguments": [
          {
            "name": "uid",
            "type": "str",
            "default": null,
            "description": "the UID of the database"
          }
        ],
        "return": {
          "type": "str",
          "description": null
        }
      },
      {
        "signature": "get_uid_from_path(path: 'str') -> 'str'",
        "arguments": [
          {
            "name": "path",
            "type": "str",
            "default": null,
            "description": null
          }
        ],
        "return": {
          "type": "str",
          "description": null
        }
      },
      {
        "signature": "record_database(uid: 'str', path: 'str') -> 'None'",
        "arguments": [
          {
            "name": "uid",
            "type": "str",
            "default": null,
            "description": "the uid of the database"
          },
          {
            "name": "path",
            "type": "str",
            "default": null,
            "description": "the path of the database"
          }
        ],
        "return": {
          "type": "None",
          "description": null
        }
      },
      {
        "signature": "uid2(uid) -> 'str'",
        "arguments": [
          {
            "name": "uid",
            "type": null,
            "default": null,
            "description": null
          }
        ],
        "return": {
          "type": "str",
          "description": null
        }
      }
    ],
    "modules": [
      {
        "name": "json",
        "description": "JSON (JavaScript Object Notation) <https://json.org> is a subset of\nJavaScript syntax (ECMA-262 3rd edition) used as a lightweight data\ninterchange format.\n\n:mod:`json` exposes an API familiar to users of the standard library\n:mod:`marshal` and :mod:`pickle` modules.  It is derived from a\nversion of the externally maintained simplejson library.\n\nEncoding basic Python object hierarchies::\n\n    >>> import json\n    >>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])\n    '[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]'\n    >>> print(json.dumps(\"\\\"foo\\bar\"))\n    \"\\\"foo\\bar\"\n    >>> print(json.dumps('\\u1234'))\n    \"\\u1234\"\n    >>> print(json.dumps('\\\\'))\n    \"\\\\\"\n    >>> print(json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True))\n    {\"a\": 0, \"b\": 0, \"c\": 0}\n    >>> from io import StringIO\n    >>> io = StringIO()\n    >>> json.dump(['streaming API'], io)\n    >>> io.getvalue()\n    '[\"streaming API\"]'\n\nCompact encoding::\n\n    >>> import json\n    >>> mydict = {'4': 5, '6': 7}\n    >>> json.dumps([1,2,3,mydict], separators=(',', ':'))\n    '[1,2,3,{\"4\":5,\"6\":7}]'\n\nPretty printing::\n\n    >>> import json\n    >>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))\n    {\n        \"4\": 5,\n        \"6\": 7\n    }\n\nDecoding JSON::\n\n    >>> import json\n    >>> obj = ['foo', {'bar': ['baz', None, 1.0, 2]}]\n    >>> json.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]') == obj\n    True\n    >>> json.loads('\"\\\\\"foo\\\\bar\"') == '\"foo\\x08ar'\n    True\n    >>> from io import StringIO\n    >>> io = StringIO('[\"streaming API\"]')\n    >>> json.load(io)[0] == 'streaming API'\n    True\n\nSpecializing JSON object decoding::\n\n    >>> import json\n    >>> def as_complex(dct):\n    ...     if '__complex__' in dct:\n    ...         return complex(dct['real'], dct['imag'])\n    ...     return dct\n    ...\n    >>> json.loads('{\"__complex__\": true, \"real\": 1, \"imag\": 2}',\n    ...     object_hook=as_complex)\n    (1+2j)\n    >>> from decimal import Decimal\n    >>> json.loads('1.1', parse_float=Decimal) == Decimal('1.1')\n    True\n\nSpecializing JSON object encoding::\n\n    >>> import json\n    >>> def encode_complex(obj):\n    ...     if isinstance(obj, complex):\n    ...         return [obj.real, obj.imag]\n    ...     raise TypeError(f'Object of type {obj.__class__.__name__} '\n    ...                     f'is not JSON serializable')\n    ...\n    >>> json.dumps(2 + 1j, default=encode_complex)\n    '[2.0, 1.0]'\n    >>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)\n    '[2.0, 1.0]'\n    >>> ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))\n    '[2.0, 1.0]'\n\n\nUsing json.tool from the shell to validate and pretty-print::\n\n    $ echo '{\"json\":\"obj\"}' | python -m json.tool\n    {\n        \"json\": \"obj\"\n    }\n    $ echo '{ 1.2:3.4}' | python -m json.tool\n    Expecting property name enclosed in double quotes: line 1 column 3 (char 2)",
        "classes": [
          {
            "name": "JSONDecodeError",
            "description": "Subclass of ValueError with the following additional properties:\n\nmsg: The unformatted error message\ndoc: The JSON document being parsed\npos: The start index of doc where parsing failed\nlineno: The line corresponding to pos\ncolno: The column corresponding to pos",
            "methods": []
          },
          {
            "name": "JSONDecoder",
            "description": "Simple JSON <https://json.org> decoder\n\nPerforms the following translations in decoding by default:\n\n+---------------+-------------------+\n| JSON          | Python            |\n+===============+===================+\n| object        | dict              |\n+---------------+-------------------+\n| array         | list              |\n+---------------+-------------------+\n| string        | str               |\n+---------------+-------------------+\n| number (int)  | int               |\n+---------------+-------------------+\n| number (real) | float             |\n+---------------+-------------------+\n| true          | True              |\n+---------------+-------------------+\n| false         | False             |\n+---------------+-------------------+\n| null          | None              |\n+---------------+-------------------+\n\nIt also understands ``NaN``, ``Infinity``, and ``-Infinity`` as\ntheir corresponding ``float`` values, which is outside the JSON spec.",
            "methods": [
              {
                "signature": "decode(self, s, _w=<built-in method match of re.Pattern object at 0x7f9912458d40>)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "s",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "_w",
                    "type": null,
                    "default": "<built-in method match of re.Pattern object at 0x7f9912458d40>",
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              },
              {
                "signature": "raw_decode(self, s, idx=0)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "s",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "idx",
                    "type": null,
                    "default": "0",
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              }
            ]
          },
          {
            "name": "JSONEncoder",
            "description": "Extensible JSON <https://json.org> encoder for Python data structures.\n\nSupports the following objects and types by default:\n\n+-------------------+---------------+\n| Python            | JSON          |\n+===================+===============+\n| dict              | object        |\n+-------------------+---------------+\n| list, tuple       | array         |\n+-------------------+---------------+\n| str               | string        |\n+-------------------+---------------+\n| int, float        | number        |\n+-------------------+---------------+\n| True              | true          |\n+-------------------+---------------+\n| False             | false         |\n+-------------------+---------------+\n| None              | null          |\n+-------------------+---------------+\n\nTo extend this to recognize other objects, subclass and implement a\n``.default()`` method with another method that returns a serializable\nobject for ``o`` if possible, otherwise it should call the superclass\nimplementation (to raise ``TypeError``).",
            "methods": [
              {
                "signature": "default(self, o)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "o",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              },
              {
                "signature": "encode(self, o)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "o",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              },
              {
                "signature": "iterencode(self, o, _one_shot=False)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "o",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "_one_shot",
                    "type": null,
                    "default": "False",
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              }
            ]
          }
        ],
        "methods": [
          {
            "signature": "detect_encoding(b)",
            "arguments": [
              {
                "name": "b",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)",
            "arguments": [
              {
                "name": "obj",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "fp",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "skipkeys",
                "type": null,
                "default": "False",
                "description": null
              },
              {
                "name": "ensure_ascii",
                "type": null,
                "default": "True",
                "description": null
              },
              {
                "name": "check_circular",
                "type": null,
                "default": "True",
                "description": null
              },
              {
                "name": "allow_nan",
                "type": null,
                "default": "True",
                "description": null
              },
              {
                "name": "cls",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "indent",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "separators",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "default",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "sort_keys",
                "type": null,
                "default": "False",
                "description": null
              },
              {
                "name": "kw",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)",
            "arguments": [
              {
                "name": "obj",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "skipkeys",
                "type": null,
                "default": "False",
                "description": null
              },
              {
                "name": "ensure_ascii",
                "type": null,
                "default": "True",
                "description": null
              },
              {
                "name": "check_circular",
                "type": null,
                "default": "True",
                "description": null
              },
              {
                "name": "allow_nan",
                "type": null,
                "default": "True",
                "description": null
              },
              {
                "name": "cls",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "indent",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "separators",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "default",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "sort_keys",
                "type": null,
                "default": "False",
                "description": null
              },
              {
                "name": "kw",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)",
            "arguments": [
              {
                "name": "fp",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "cls",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "object_hook",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "parse_float",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "parse_int",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "parse_constant",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "object_pairs_hook",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "kw",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "loads(s, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)",
            "arguments": [
              {
                "name": "s",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "cls",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "object_hook",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "parse_float",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "parse_int",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "parse_constant",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "object_pairs_hook",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "kw",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          }
        ],
        "modules": []
      },
      {
        "name": "subprocess",
        "description": "Subprocesses with accessible I/O streams\n\nThis module allows you to spawn processes, connect to their\ninput/output/error pipes, and obtain their return codes.\n\nFor a complete description of this module see the Python documentation.\n\nMain API\n========\nrun(...): Runs a command, waits for it to complete, then returns a\n          CompletedProcess instance.\nPopen(...): A class for flexibly executing a command in a new process\n\nConstants\n---------\nDEVNULL: Special value that indicates that os.devnull should be used\nPIPE:    Special value that indicates a pipe should be created\nSTDOUT:  Special value that indicates that stderr should go to stdout\n\n\nOlder API\n=========\ncall(...): Runs a command, waits for it to complete, then returns\n    the return code.\ncheck_call(...): Same as call() but raises CalledProcessError()\n    if return code is not 0\ncheck_output(...): Same as check_call() but returns the contents of\n    stdout instead of a return code\ngetoutput(...): Runs a command in the shell, waits for it to complete,\n    then returns the output\ngetstatusoutput(...): Runs a command in the shell, waits for it to complete,\n    then returns a (exitcode, output) tuple",
        "classes": [
          {
            "name": "CalledProcessError",
            "description": "Raised when run() is called with check=True and the process\nreturns a non-zero exit status.\n\nAttributes:\n  cmd, returncode, stdout, stderr, output",
            "methods": []
          },
          {
            "name": "CompletedProcess",
            "description": "A process that has finished running.\n\nThis is returned by run().\n\nAttributes:\n  args: The list or str args passed to run().\n  returncode: The exit code of the process, negative for signals.\n  stdout: The standard output (None if not captured).\n  stderr: The standard error (None if not captured).",
            "methods": [
              {
                "signature": "check_returncode(self)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              }
            ]
          },
          {
            "name": "Popen",
            "description": "Execute a child program in a new process.\n\nFor a complete description of the arguments see the Python documentation.\n\nArguments:\n  args: A string, or a sequence of program arguments.\n\n  bufsize: supplied as the buffering argument to the open() function when\n      creating the stdin/stdout/stderr pipe file objects\n\n  executable: A replacement program to execute.\n\n  stdin, stdout and stderr: These specify the executed programs' standard\n      input, standard output and standard error file handles, respectively.\n\n  preexec_fn: (POSIX only) An object to be called in the child process\n      just before the child is executed.\n\n  close_fds: Controls closing or inheriting of file descriptors.\n\n  shell: If true, the command will be executed through the shell.\n\n  cwd: Sets the current directory before the child is executed.\n\n  env: Defines the environment variables for the new process.\n\n  text: If true, decode stdin, stdout and stderr using the given encoding\n      (if set) or the system default otherwise.\n\n  universal_newlines: Alias of text, provided for backwards compatibility.\n\n  startupinfo and creationflags (Windows only)\n\n  restore_signals (POSIX only)\n\n  start_new_session (POSIX only)\n\n  group (POSIX only)\n\n  extra_groups (POSIX only)\n\n  user (POSIX only)\n\n  umask (POSIX only)\n\n  pass_fds (POSIX only)\n\n  encoding and errors: Text mode encoding and error handling to use for\n      file objects stdin, stdout and stderr.\n\nAttributes:\n    stdin, stdout, stderr, pid, returncode",
            "methods": [
              {
                "signature": "communicate(self, input=None, timeout=None)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "input",
                    "type": null,
                    "default": "None",
                    "description": null
                  },
                  {
                    "name": "timeout",
                    "type": null,
                    "default": "None",
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              },
              {
                "signature": "kill(self)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              },
              {
                "signature": "poll(self)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              },
              {
                "signature": "send_signal(self, sig)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "sig",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              },
              {
                "signature": "terminate(self)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              },
              {
                "signature": "wait(self, timeout=None)",
                "arguments": [
                  {
                    "name": "self",
                    "type": null,
                    "default": null,
                    "description": null
                  },
                  {
                    "name": "timeout",
                    "type": null,
                    "default": "None",
                    "description": null
                  }
                ],
                "return": {
                  "type": null,
                  "description": null
                }
              }
            ]
          },
          {
            "name": "SubprocessError",
            "description": "Common base class for all non-exit exceptions.",
            "methods": []
          },
          {
            "name": "TimeoutExpired",
            "description": "This exception is raised when the timeout expires while waiting for a\nchild process.\n\nAttributes:\n    cmd, output, stdout, stderr, timeout",
            "methods": []
          }
        ],
        "methods": [
          {
            "signature": "call(*popenargs, timeout=None, **kwargs)",
            "arguments": [
              {
                "name": "popenargs",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "timeout",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "kwargs",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "check_call(*popenargs, **kwargs)",
            "arguments": [
              {
                "name": "popenargs",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "kwargs",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "check_output(*popenargs, timeout=None, **kwargs)",
            "arguments": [
              {
                "name": "popenargs",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "timeout",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "kwargs",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "getoutput(cmd)",
            "arguments": [
              {
                "name": "cmd",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "getstatusoutput(cmd)",
            "arguments": [
              {
                "name": "cmd",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "list2cmdline(seq)",
            "arguments": [
              {
                "name": "seq",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "run(*popenargs, input=None, capture_output=False, timeout=None, check=False, **kwargs)",
            "arguments": [
              {
                "name": "popenargs",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "input",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "capture_output",
                "type": null,
                "default": "False",
                "description": null
              },
              {
                "name": "timeout",
                "type": null,
                "default": "None",
                "description": null
              },
              {
                "name": "check",
                "type": null,
                "default": "False",
                "description": null
              },
              {
                "name": "kwargs",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          }
        ],
        "modules": []
      }
    ]
  },
  {
    "name": "manager",
    "description": null,
    "classes": [
      {
        "name": "Manager",
        "description": "View of database.\n\nArgs:\n    path (`str`): path to the directory of the database. If doesn't exist,\n        a new database will be created.\n    comm (`MPI.Comm`): MPI communicator\n    uid: UID of the database\n\nAttributes:\n    FIX_DF: If False, the dataframe of the database is reconstructed every\n        time it is accessed.\n    fromUID: Access a database by its UID\n    fromName: Access a database by its path/name",
        "methods": [
          {
            "signature": "create_simulation(self, uid: 'str' = None, parameters: 'dict' = None, skip_duplicate_check: 'bool' = False) -> 'SimulationWriter'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "uid",
                "type": "str",
                "default": "None",
                "description": "The name/uid for the simulation. If not specified, a random id will be assigned."
              },
              {
                "name": "parameters",
                "type": "dict",
                "default": "None",
                "description": "Parameter dictionary. If provided, the parameters will be checked against the existing sims for duplication. Otherwise, they may be specified later with :func:`~bamboost.simulation.SimulationWriter.add_parameters`."
              },
              {
                "name": "skip_duplicate_check",
                "type": "bool",
                "default": "False",
                "description": "if True, the duplicate check is skipped."
              }
            ],
            "return": {
              "type": "SimulationWriter",
              "description": "sim (:class:`~bamboost.simulation.SimulationWriter`)"
            }
          },
          {
            "signature": "get_parameters(self) -> 'dict'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "dict",
              "description": "Dictionary of parameters with it's count, range, and type. Sorted by count."
            }
          },
          {
            "signature": "get_view(self) -> 'pd.DataFrame'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "pd.DataFrame",
              "description": ":class:`pd.DataFrame`"
            }
          },
          {
            "signature": "global_fields_in_all(self) -> 'list'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "list",
              "description": "List of global fields"
            }
          },
          {
            "signature": "remove(self, uid: 'str') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "uid",
                "type": "str",
                "default": null,
                "description": "uid"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "sim(self, uid, return_writer: 'bool' = False) -> 'Simulation'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "uid",
                "type": null,
                "default": null,
                "description": "unique identifier"
              },
              {
                "name": "return_writer",
                "type": "bool",
                "default": "False",
                "description": "if true, return `SimulationWriter`, otherwise return `Simulation`"
              }
            ],
            "return": {
              "type": "Simulation",
              "description": ":class:`~bamboost.simulation.Simulation`"
            }
          },
          {
            "signature": "sims(self, select: 'pd.Series' = None, sort: 'str' = None, reverse: 'bool' = False, exclude: 'set' = None, return_writer: 'bool' = False) -> 'list'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "select",
                "type": "pd.Series",
                "default": "None",
                "description": "pandas boolean series"
              },
              {
                "name": "sort",
                "type": "str",
                "default": "None",
                "description": "Optionally sort the list with this keyword"
              },
              {
                "name": "reverse",
                "type": "bool",
                "default": "False",
                "description": "swap sort direction"
              },
              {
                "name": "exclude",
                "type": "set",
                "default": "None",
                "description": "sims to exclude"
              },
              {
                "name": "return_writer",
                "type": "bool",
                "default": "False",
                "description": "if true, return `SimulationWriter`, otherwise return `Simulation`"
              }
            ],
            "return": {
              "type": "list",
              "description": "A list of `:class:~bamboost.simulation.Simulation` objects"
            }
          }
        ]
      }
    ],
    "methods": [
      {
        "signature": "open_h5file(file: 'str', mode, driver=None, comm=None)",
        "arguments": [
          {
            "name": "file",
            "type": "str",
            "default": null,
            "description": "File to open"
          },
          {
            "name": "mode",
            "type": null,
            "default": null,
            "description": "'r', 'a', 'w', ..."
          },
          {
            "name": "driver",
            "type": null,
            "default": "None",
            "description": "driver for h5.File"
          },
          {
            "name": "comm",
            "type": null,
            "default": "None",
            "description": "MPI communicator"
          }
        ],
        "return": {
          "type": null,
          "description": null
        }
      }
    ],
    "modules": []
  },
  {
    "name": "simulation",
    "description": null,
    "classes": [
      {
        "name": "Links",
        "description": "Link group. Used to create and access links.\n\nI don't know how to distribute this to its own file in the accessors\ndirectory, due to circular imports.",
        "methods": [
          {
            "signature": "add_dataset(self, name: 'str', vector: 'np.ndarray', attrs: 'dict' = None) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "name",
                "type": "str",
                "default": null,
                "description": "Name for the dataset"
              },
              {
                "name": "vector",
                "type": "np.ndarray",
                "default": null,
                "description": "Data to write (max 2d)"
              },
              {
                "name": "attrs",
                "type": "dict",
                "default": "None",
                "description": "Optional. Attributes of dataset."
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "all_links(self) -> 'dict'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "dict",
              "description": null
            }
          },
          {
            "signature": "datasets(self) -> 'set'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "set",
              "description": null
            }
          },
          {
            "signature": "groups(self) -> 'set'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "set",
              "description": null
            }
          },
          {
            "signature": "keys(self) -> 'set'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "set",
              "description": null
            }
          },
          {
            "signature": "require_group(self, name: 'str') -> 'Group'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "name",
                "type": "str",
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "Group",
              "description": ":class:`~bamboost.hdf_pointer.Group`"
            }
          },
          {
            "signature": "update_attrs(self, attrs: 'dict') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "attrs",
                "type": "dict",
                "default": null,
                "description": "the dictionary to write as attributes"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          }
        ]
      },
      {
        "name": "Simulation",
        "description": "A single dataset/simulation. Used to write to it, read from it or append.\n\nArgs:\n    uid (str): unique identifier\n    path (str): path to parent/database folder\n    comm (MPI.Comm): MPI communicator (default=MPI.COMM_WORLD)",
        "methods": [
          {
            "signature": "change_note(self, note) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "note",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "change_status(self, status: 'str') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "status",
                "type": "str",
                "default": null,
                "description": "new status"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "create_batch_script(self, commands: 'list' = None, nnodes=1, ntasks=4, ncpus=1, time='04:00:00', mem_per_cpu=2048, tmp=8000, euler=True) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "commands",
                "type": "list",
                "default": "None",
                "description": "A list of strings being the user defined commands to run"
              },
              {
                "name": "nnodes",
                "type": null,
                "default": "1",
                "description": "nb of nodes (default=1)"
              },
              {
                "name": "ntasks",
                "type": null,
                "default": "4",
                "description": "nb of tasks (default=4)"
              },
              {
                "name": "ncpus",
                "type": null,
                "default": "1",
                "description": "nb of cpus per task (default=1)"
              },
              {
                "name": "time",
                "type": null,
                "default": "04:00:00",
                "description": "requested time (default=4 hours)"
              },
              {
                "name": "mem_per_cpu",
                "type": null,
                "default": "2048",
                "description": "memory (default=2048)"
              },
              {
                "name": "tmp",
                "type": null,
                "default": "8000",
                "description": "temporary storage, set None to exclude option (default=8000)"
              },
              {
                "name": "euler",
                "type": null,
                "default": "True",
                "description": "If false, a local bash script will be written"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "create_xdmf_file(self, fields: 'list' = None, nb_steps: 'int' = None) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "fields",
                "type": "list",
                "default": "None",
                "description": "fields for which to write timeseries information, if not specified, all fields in data are written."
              },
              {
                "name": "nb_steps",
                "type": "int",
                "default": "None",
                "description": "number of steps the simulation has"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "get_data_interpolator(self, field: 'str', step: 'int')",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "field",
                "type": "str",
                "default": null,
                "description": null
              },
              {
                "name": "step",
                "type": "int",
                "default": null,
                "description": "step"
              }
            ],
            "return": {
              "type": null,
              "description": ":class:`scipy.interpolate.LinearNDInterpolator`"
            }
          },
          {
            "signature": "get_full_uid(self) -> 'str'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "str",
              "description": null
            }
          },
          {
            "signature": "get_mesh(self, mesh_name: 'str' = None) -> 'Tuple[np.ndarray, np.ndarray]'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "mesh_name",
                "type": "str",
                "default": "None",
                "description": "optional, name of mesh to read (default = mesh)"
              }
            ],
            "return": {
              "type": "Tuple[np.ndarray, np.ndarray]",
              "description": "Tuple of np.arrays (coordinates, connectivity)"
            }
          },
          {
            "signature": "open(self, mode: 'str' = 'r', driver=None, comm=None) -> 'FileHandler'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "mode",
                "type": "str",
                "default": "r",
                "description": "file mode (see h5py docs)"
              },
              {
                "name": "driver",
                "type": null,
                "default": "None",
                "description": "file driver (see h5py docs)"
              },
              {
                "name": "comm",
                "type": null,
                "default": "None",
                "description": "mpi communicator"
              }
            ],
            "return": {
              "type": "FileHandler",
              "description": null
            }
          },
          {
            "signature": "open_in_file_explorer(self) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "show_files(self, level=-1, limit_to_directories=False, length_limit=1000, printit=True) -> 'str'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "level",
                "type": null,
                "default": "-1",
                "description": "how deep to print the tree"
              },
              {
                "name": "limit_to_directories",
                "type": null,
                "default": "False",
                "description": "only print directories"
              },
              {
                "name": "length_limit",
                "type": null,
                "default": "1000",
                "description": "cutoff"
              },
              {
                "name": "printit",
                "type": null,
                "default": "True",
                "description": null
              }
            ],
            "return": {
              "type": "str",
              "description": null
            }
          },
          {
            "signature": "show_h5tree(self) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "submit(self) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "update_metadata(self, update_dict: 'dict') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "update_dict",
                "type": "dict",
                "default": null,
                "description": "dictionary to push"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "update_parameters(self, update_dict: 'dict') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "update_dict",
                "type": "dict",
                "default": null,
                "description": "dictionary to push"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          }
        ]
      }
    ],
    "methods": [
      {
        "signature": "with_file_open(mode: 'str' = 'r', driver=None, comm=None)",
        "arguments": [
          {
            "name": "mode",
            "type": "str",
            "default": "r",
            "description": null
          },
          {
            "name": "driver",
            "type": null,
            "default": "None",
            "description": null
          },
          {
            "name": "comm",
            "type": null,
            "default": "None",
            "description": null
          }
        ],
        "return": {
          "type": null,
          "description": null
        }
      }
    ],
    "modules": []
  },
  {
    "name": "simulation_writer",
    "description": null,
    "classes": [
      {
        "name": "SimulationWriter",
        "description": "The SimulationWriter is the writer object for a single simulation. It inherits\nall reading methods from :class:`Simulation`.\n\nArgs:\n    uid: The identifier of the simulation\n    path: The (parent) database path\n    comm: An MPI communicator (Default: `MPI.COMM_WORLD`)",
        "methods": [
          {
            "signature": "add_additional(self, name: 'str', file: 'str') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "name",
                "type": "str",
                "default": null,
                "description": "Name of data"
              },
              {
                "name": "file",
                "type": "str",
                "default": null,
                "description": "filename of file"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "add_field(self, name: 'str', vector: 'np.array', time: 'float' = None, mesh: 'str' = None) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "name",
                "type": "str",
                "default": null,
                "description": "Name for the dataset"
              },
              {
                "name": "vector",
                "type": "np.array",
                "default": null,
                "description": "Dataset"
              },
              {
                "name": "time",
                "type": "float",
                "default": "None",
                "description": "Optional. time"
              },
              {
                "name": "mesh",
                "type": "str",
                "default": "None",
                "description": "Optional. Linked mesh for this data"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "add_global_field(self, name: 'str', value: 'float') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "name",
                "type": "str",
                "default": null,
                "description": "Name for the data"
              },
              {
                "name": "value",
                "type": "float",
                "default": null,
                "description": "Data"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "add_mesh(self, coordinates: 'np.ndarray', connectivity: 'np.ndarray', mesh_name: 'str' = None) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "coordinates",
                "type": "np.ndarray",
                "default": null,
                "description": "Coordinates as array (nb_nodes, dim)"
              },
              {
                "name": "connectivity",
                "type": "np.ndarray",
                "default": null,
                "description": "Connectivity matrix (nb_cells, nb nodes per cell)"
              },
              {
                "name": "mesh_name",
                "type": "str",
                "default": "None",
                "description": "name for mesh (default = `mesh`)"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "add_metadata(self) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "add_parameters(self, parameters: 'dict') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "parameters",
                "type": "dict",
                "default": null,
                "description": "Dictionary with parameters."
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "change_note(self, note) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "note",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "change_status(self, status: 'str') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "status",
                "type": "str",
                "default": null,
                "description": "new status"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "copy_executable(self, script_path: 'str') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "script_path",
                "type": "str",
                "default": null,
                "description": "path to script"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "copy_file(self, source: 'Union[str, list]', destination: 'str' = '') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "source",
                "type": "Union[str, list]",
                "default": null,
                "description": "path to file, or list of files"
              },
              {
                "name": "destination",
                "type": "str",
                "default": "",
                "description": "destination (will create intermediatory directories)"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "create_batch_script(self, commands: 'list' = None, nnodes=1, ntasks=4, ncpus=1, time='04:00:00', mem_per_cpu=2048, tmp=8000, euler=True) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "commands",
                "type": "list",
                "default": "None",
                "description": "A list of strings being the user defined commands to run"
              },
              {
                "name": "nnodes",
                "type": null,
                "default": "1",
                "description": "nb of nodes (default=1)"
              },
              {
                "name": "ntasks",
                "type": null,
                "default": "4",
                "description": "nb of tasks (default=4)"
              },
              {
                "name": "ncpus",
                "type": null,
                "default": "1",
                "description": "nb of cpus per task (default=1)"
              },
              {
                "name": "time",
                "type": null,
                "default": "04:00:00",
                "description": "requested time (default=4 hours)"
              },
              {
                "name": "mem_per_cpu",
                "type": null,
                "default": "2048",
                "description": "memory (default=2048)"
              },
              {
                "name": "tmp",
                "type": null,
                "default": "8000",
                "description": "temporary storage, set None to exclude option (default=8000)"
              },
              {
                "name": "euler",
                "type": null,
                "default": "True",
                "description": "If false, a local bash script will be written"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "create_xdmf_file(self, fields: 'list' = None, nb_steps: 'int' = None) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "fields",
                "type": "list",
                "default": "None",
                "description": "fields for which to write timeseries information, if not specified, all fields in data are written."
              },
              {
                "name": "nb_steps",
                "type": "int",
                "default": "None",
                "description": "number of steps the simulation has"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "finish_sim(self, status: 'str' = 'Finished') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "status",
                "type": "str",
                "default": "Finished",
                "description": null
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "finish_step(self) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "get_data_interpolator(self, field: 'str', step: 'int')",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "field",
                "type": "str",
                "default": null,
                "description": null
              },
              {
                "name": "step",
                "type": "int",
                "default": null,
                "description": "step"
              }
            ],
            "return": {
              "type": null,
              "description": ":class:`scipy.interpolate.LinearNDInterpolator`"
            }
          },
          {
            "signature": "get_full_uid(self) -> 'str'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "str",
              "description": null
            }
          },
          {
            "signature": "get_mesh(self, mesh_name: 'str' = None) -> 'Tuple[np.ndarray, np.ndarray]'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "mesh_name",
                "type": "str",
                "default": "None",
                "description": "optional, name of mesh to read (default = mesh)"
              }
            ],
            "return": {
              "type": "Tuple[np.ndarray, np.ndarray]",
              "description": "Tuple of np.arrays (coordinates, connectivity)"
            }
          },
          {
            "signature": "initialize(self) -> 'SimulationWriter'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "SimulationWriter",
              "description": null
            }
          },
          {
            "signature": "open(self, mode: 'str' = 'r', driver=None, comm=None) -> 'FileHandler'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "mode",
                "type": "str",
                "default": "r",
                "description": "file mode (see h5py docs)"
              },
              {
                "name": "driver",
                "type": null,
                "default": "None",
                "description": "file driver (see h5py docs)"
              },
              {
                "name": "comm",
                "type": null,
                "default": "None",
                "description": "mpi communicator"
              }
            ],
            "return": {
              "type": "FileHandler",
              "description": null
            }
          },
          {
            "signature": "open_in_file_explorer(self) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "register_git_attributes(self, repo_path: 'str' = './') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "repo_path",
                "type": "str",
                "default": "./",
                "description": "path to git repository"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "show_files(self, level=-1, limit_to_directories=False, length_limit=1000, printit=True) -> 'str'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "level",
                "type": null,
                "default": "-1",
                "description": "how deep to print the tree"
              },
              {
                "name": "limit_to_directories",
                "type": null,
                "default": "False",
                "description": "only print directories"
              },
              {
                "name": "length_limit",
                "type": null,
                "default": "1000",
                "description": "cutoff"
              },
              {
                "name": "printit",
                "type": null,
                "default": "True",
                "description": null
              }
            ],
            "return": {
              "type": "str",
              "description": null
            }
          },
          {
            "signature": "show_h5tree(self) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "submit(self) -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "update_metadata(self, update_dict: 'dict') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "update_dict",
                "type": "dict",
                "default": null,
                "description": "dictionary to push"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "update_parameters(self, update_dict: 'dict') -> 'None'",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "update_dict",
                "type": "dict",
                "default": null,
                "description": "dictionary to push"
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          }
        ]
      }
    ],
    "methods": [
      {
        "signature": "flatten_dict(dictionary, parent_key='', seperator='.')",
        "arguments": [
          {
            "name": "dictionary",
            "type": null,
            "default": null,
            "description": null
          },
          {
            "name": "parent_key",
            "type": null,
            "default": "",
            "description": null
          },
          {
            "name": "seperator",
            "type": null,
            "default": ".",
            "description": null
          }
        ],
        "return": {
          "type": null,
          "description": null
        }
      }
    ],
    "modules": []
  },
  {
    "name": "xdmf",
    "description": null,
    "classes": [
      {
        "name": "XDMFWriter",
        "description": "Write xdmf file for a subset of the stored data in the H5 file.\n\nArgs:\n    filename (str): xdmf file path\n    h5file (str): h5 file path",
        "methods": [
          {
            "signature": "add_timeseries(self, steps: int, fields: list)",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "steps",
                "type": "<class 'int'>",
                "default": null,
                "description": null
              },
              {
                "name": "fields",
                "type": "<class 'list'>",
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "write_attribute(self, grid: xml.etree.ElementTree.Element, field_name: str, name: str, step: int) -> None",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "grid",
                "type": "<class 'xml.etree.ElementTree.Element'>",
                "default": null,
                "description": null
              },
              {
                "name": "field_name",
                "type": "<class 'str'>",
                "default": null,
                "description": null
              },
              {
                "name": "name",
                "type": "<class 'str'>",
                "default": null,
                "description": null
              },
              {
                "name": "step",
                "type": "<class 'int'>",
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": "None",
              "description": null
            }
          },
          {
            "signature": "write_file(self)",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "write_points_cells(self, points_location: str, cells_location: str)",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "points_location",
                "type": "<class 'str'>",
                "default": null,
                "description": null
              },
              {
                "name": "cells_location",
                "type": "<class 'str'>",
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          },
          {
            "signature": "write_step(self, collection: xml.etree.ElementTree.Element, fields: list, step: int)",
            "arguments": [
              {
                "name": "self",
                "type": null,
                "default": null,
                "description": null
              },
              {
                "name": "collection",
                "type": "<class 'xml.etree.ElementTree.Element'>",
                "default": null,
                "description": null
              },
              {
                "name": "fields",
                "type": "<class 'list'>",
                "default": null,
                "description": null
              },
              {
                "name": "step",
                "type": "<class 'int'>",
                "default": null,
                "description": null
              }
            ],
            "return": {
              "type": null,
              "description": null
            }
          }
        ]
      }
    ],
    "methods": [],
    "modules": []
  }
]