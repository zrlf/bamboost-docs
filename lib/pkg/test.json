[
  {
    "members": [],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/__init__.py",
      "lineno": 1
    },
    "name": "/home/florez/work/code/bamboost/bamboost"
  },
  {
    "members": [],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/accessors/__init__.py",
      "lineno": 1
    },
    "name": "/home/florez/work/code/bamboost/bamboost.accessors"
  },
  {
    "members": [
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/globals.py",
                  "lineno": 33
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "pd.DataFrame",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/globals.py",
                  "lineno": 32
                },
                "name": "property"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/accessors/globals.py",
              "lineno": 33
            },
            "name": "df",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/accessors/globals.py",
                "lineno": 33
              },
              "content": "Return a pandas DataFrame with all datasets."
            },
            "type": "function"
          }
        ],
        "bases": ["Group"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/accessors/globals.py",
          "lineno": 21
        },
        "name": "GlobalGroup",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/accessors/globals.py",
            "lineno": 21
          },
          "content": "Enhanced Group for '/globals'.\n\n**Arguments**:\n\n- `file_handler` - The file handler.\n- `path_to_data` - The in-file path to the group."
        },
        "type": "class"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/accessors/globals.py",
      "lineno": 10
    },
    "name": "/home/florez/work/code/bamboost/bamboost.accessors.globals"
  },
  {
    "members": [],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/accessors/meshes.py",
      "lineno": 10
    },
    "name": "/home/florez/work/code/bamboost/bamboost.accessors.meshes"
  },
  {
    "members": [
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 56
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "pd.DataFrame",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 54
                },
                "name": "property"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 55
                },
                "name": "with_file_open",
                "args": "(\"r\")"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
              "lineno": 56
            },
            "name": "info",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                "lineno": 56
              },
              "content": "View the data stored.\n\n**Returns**:\n\n  :class:`pd.DataFrame`"
            },
            "type": "function"
          }
        ],
        "bases": ["hdf_pointer.Group"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
          "lineno": 31
        },
        "name": "DataGroup",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
            "lineno": 31
          },
          "content": "This pointer points to the data directory. Item accessor returns the\nindividual data fields. `meshes` is passed to here for access of linked\nmeshes."
        },
        "type": "class"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 132
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 132
                },
                "name": "steps",
                "type": "POSITIONAL_REMAINDER",
                "datatype": "int"
              }
            ],
            "return_type": "np.ndarray",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 131
                },
                "name": "with_file_open",
                "args": "()"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
              "lineno": 132
            },
            "name": "at_step",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                "lineno": 132
              },
              "content": "Direct access to data at step. Does not require the virtual dataset.\n\n**Arguments**:\n\n  step0, step1, ...: step to extract (can be multiple)\n\n**Returns**:\n\n  :class:`np.ndarray`"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 152
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "np.ndarray",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 150
                },
                "name": "property"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 151
                },
                "name": "with_file_open",
                "args": "()"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
              "lineno": 152
            },
            "name": "times",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                "lineno": 152
              },
              "content": "Return the array of timestamps.\n\n**Returns**:\n\n  :class:`np.ndarray`"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 167
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "Mesh",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 165
                },
                "name": "property"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 166
                },
                "name": "with_file_open",
                "args": "()"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
              "lineno": 167
            },
            "name": "mesh",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                "lineno": 167
              },
              "content": "Return the linked mesh. Currently returns the linked mesh of first step only.\n\n**Returns**:\n\n  :class:`tuple[np.ndarray, np.ndarray]`"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 177
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "np.ndarray",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 176
                },
                "name": "property"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
              "lineno": 177
            },
            "name": "coordinates",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                "lineno": 177
              },
              "content": "Wrapper for mesh.coordinates"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 182
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "np.ndarray",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 181
                },
                "name": "property"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
              "lineno": 182
            },
            "name": "connectivity",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                "lineno": 182
              },
              "content": "Wrapper for mesh.connectivity"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 188
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "Tuple[np.ndarray, np.ndarray]",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 186
                },
                "name": "property"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 187
                },
                "name": "with_file_open",
                "args": "()"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
              "lineno": 188
            },
            "name": "msh",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                "lineno": 188
              },
              "content": "Wrapper to get mesh as tuple"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                  "lineno": 192
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
              "lineno": 192
            },
            "name": "regenerate_virtual_datasets",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
                "lineno": 192
              },
              "content": "Regenerate virtual dataset. Call this if the data has changed, thus the\nvirtual datasets need to be updated to cover the actual data."
            },
            "type": "function"
          }
        ],
        "bases": ["hdf_pointer.Group"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
          "lineno": 75
        },
        "name": "FieldData",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
            "lineno": 75
          },
          "content": "This pointer points to a specific data field. `meshes` is passed to here\nfor access of linked meshes."
        },
        "type": "class"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/accessors/fielddata.py",
      "lineno": 10
    },
    "name": "/home/florez/work/code/bamboost/bamboost.accessors.fielddata"
  },
  {
    "members": [],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/common/git_utility.py",
      "lineno": 10
    },
    "name": "/home/florez/work/code/bamboost/bamboost.common.git_utility"
  },
  {
    "members": [
      {
        "members": [],
        "bases": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/common/_mock_mpi.py",
          "lineno": 11
        },
        "name": "MockMPI",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/common/_mock_mpi.py",
            "lineno": 11
          },
          "content": "Mock class for `mpi4py.MPI` to be used when MPI is not available or usage\nnot desired. Not importing MPI increases launch speed significantly, which\nis important for CLI applications.\n\n**Attributes**:\n\n- `Comm` - Mock class for `mpi4py.MPI.Comm`\n- `COMM_WORLD` - Mock object for `mpi4py.MPI.COMM_WORLD`\n- `COMM_SELF` - Mock object for `mpi4py.MPI.COMM_SELF`\n- `COMM_NULL` - Mock object for `mpi4py.MPI.COMM_NULL`"
        },
        "type": "class"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/common/_mock_mpi.py",
      "lineno": 11
    },
    "name": "/home/florez/work/code/bamboost/bamboost.common._mock_mpi"
  },
  {
    "members": [
      {
        "datatype": "bool",
        "value": "os.environ.get(\"BAMBOOST_MPI\", None)",
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/common/mpi.py",
          "lineno": 21
        },
        "name": "ENV_BAMBOOST_MPI",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/common/mpi.py",
            "lineno": 22
          },
          "content": "Indicates the use of `mpi4py.MPI`. If `0`, the `MockMPI` class is used\ninstead. Is set by reading the environment variable `BAMBOOST_MPI` [0 or 1]."
        },
        "type": "data"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/common/mpi.py",
      "lineno": 9
    },
    "name": "/home/florez/work/code/bamboost/bamboost.common.mpi"
  },
  {
    "members": [],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/common/__init__.py",
      "lineno": 1
    },
    "name": "/home/florez/work/code/bamboost/bamboost.common"
  },
  {
    "members": [
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 43
                },
                "name": "cls",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 43
                },
                "name": "file_handler",
                "type": "POSITIONAL",
                "datatype": "FileHandler"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 43
                },
                "name": "path_to_data",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "BasePointer",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 42
                },
                "name": "classmethod"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
              "lineno": 43
            },
            "name": "new_pointer",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                "lineno": 43
              },
              "content": "Returns a new pointer object."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 62
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 61
                },
                "name": "property"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
              "lineno": 62
            },
            "name": "obj",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                "lineno": 62
              },
              "content": "The object this BasePointer points to. File needs to be open for access."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 79
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 79
                },
                "name": "__name",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "Any",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 78
                },
                "name": "with_file_open",
                "args": "(\"r\")"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
              "lineno": 79
            },
            "name": "__getattr__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                "lineno": 79
              },
              "content": "Any attribute request is sent to the h5py object the pointer points to."
            },
            "type": "function"
          }
        ],
        "bases": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
          "lineno": 32
        },
        "name": "BasePointer",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
            "lineno": 32
          },
          "content": "Pointer to a location in an hdf5 file. The constructor takes a\n:class:`~.file_handler.FileHandler` and the in-file path to the object.\nThe base class represents a generic group in the file\n\n**Arguments**:\n\n- `file_handler` - file this belongs to\n- `path_to_data` - infile path to object"
        },
        "type": "class"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 121
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 121
                },
                "name": "variant",
                "type": "POSITIONAL",
                "datatype": "Literal[\"group\", \"dataset\", \"all\"]",
                "default_value": "\"all\""
              }
            ],
            "return_type": "dict",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 119
                },
                "name": "with_file_open",
                "args": "(\"r\")"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
              "lineno": 120
            },
            "name": "extract_attrs",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                "lineno": 122
              },
              "content": "Extract the attributes of all members of the group.\n\n**Arguments**:\n\n- `variant` - one of 'group', 'dataset', 'all'"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 143
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 142
                },
                "name": "with_file_open",
                "args": "(\"r\")"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
              "lineno": 143
            },
            "name": "_repr_html_",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                "lineno": 143
              },
              "content": "Repr showing the content of the group."
            },
            "type": "function"
          }
        ],
        "bases": ["BasePointer"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
          "lineno": 96
        },
        "name": "Group",
        "type": "class"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 203
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 203
                },
                "name": "key",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "Any",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 202
                },
                "name": "with_file_open",
                "args": "(\"r\")"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
              "lineno": 203
            },
            "name": "__getitem__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                "lineno": 203
              },
              "content": "Used to access datasets (:class:`~bamboost.common.hdf_pointer.Dataset`)\nor groups inside this group (:class:`~bamboost.common.hdf_pointer.MutableGroup`)"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 219
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 219
                },
                "name": "key",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 219
                },
                "name": "newvalue",
                "type": "POSITIONAL"
              }
            ],
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
              "lineno": 219
            },
            "name": "__setitem__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                "lineno": 219
              },
              "content": "Used to set an attribute.\nWill be written as an attribute to the group."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 229
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 229
                },
                "name": "key",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 228
                },
                "name": "with_file_open",
                "args": "(\"a\")"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
              "lineno": 229
            },
            "name": "__delitem__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                "lineno": 229
              },
              "content": "Deletes an item."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 237
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 237
                },
                "name": "attrs",
                "type": "POSITIONAL",
                "datatype": "dict"
              }
            ],
            "return_type": "None",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 236
                },
                "name": "with_file_open",
                "args": "(\"a\")"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
              "lineno": 237
            },
            "name": "update_attrs",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                "lineno": 237
              },
              "content": "Update the attributes of the group.\n\n**Arguments**:\n\n- `attrs` - the dictionary to write as attributes"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 246
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 246
                },
                "name": "name",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 246
                },
                "name": "vector",
                "type": "POSITIONAL",
                "datatype": "np.ndarray"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 246
                },
                "name": "attrs",
                "type": "POSITIONAL",
                "datatype": "dict",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 246
                },
                "name": "dtype",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "None"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
              "lineno": 245
            },
            "name": "add_dataset",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                "lineno": 247
              },
              "content": "Add a dataset to the group. Error is thrown if attempting to overwrite\nwith different shape than before. If same shape, data is overwritten\n(this is inherited from h5py -> require_dataset)\n\n**Arguments**:\n\n- `name` - Name for the dataset\n- `vector` - Data to write (max 2d)\n- `attrs` - Optional. Attributes of dataset.\n- `dtype` - Optional. dtype of dataset. If not specified, uses dtype of inpyt array"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 280
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                  "lineno": 280
                },
                "name": "name",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "MutableGroup",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
              "lineno": 280
            },
            "name": "require_group",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
                "lineno": 280
              },
              "content": "Add a new group to the current group. If exists, return existing.\n\n**Returns**:\n\n  :class:`~bamboost.hdf_pointer.Group`"
            },
            "type": "function"
          }
        ],
        "bases": ["Group"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
          "lineno": 190
        },
        "name": "MutableGroup",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
            "lineno": 190
          },
          "content": "Used for the `userdata` group."
        },
        "type": "class"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/common/hdf_pointer.py",
      "lineno": 10
    },
    "name": "/home/florez/work/code/bamboost/bamboost.common.hdf_pointer"
  },
  {
    "members": [
      {
        "args": [
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
              "lineno": 62
            },
            "name": "dir_path",
            "type": "POSITIONAL",
            "datatype": "Path"
          },
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
              "lineno": 63
            },
            "name": "level",
            "type": "POSITIONAL",
            "datatype": "int",
            "default_value": "-1"
          },
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
              "lineno": 64
            },
            "name": "limit_to_directories",
            "type": "POSITIONAL",
            "datatype": "bool",
            "default_value": "False"
          },
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
              "lineno": 65
            },
            "name": "length_limit",
            "type": "POSITIONAL",
            "datatype": "int",
            "default_value": "1000"
          }
        ],
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
          "lineno": 61
        },
        "name": "tree",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
            "lineno": 66
          },
          "content": "Given a directory Path object print a visual tree structure"
        },
        "type": "function"
      },
      {
        "args": [
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
              "lineno": 124
            },
            "name": "df",
            "type": "POSITIONAL",
            "datatype": "pd.DataFrame"
          }
        ],
        "return_type": "pd.DataFrame",
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
          "lineno": 124
        },
        "name": "show_differences",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
            "lineno": 124
          },
          "content": "This function takes a pandas DataFrame as input and returns a modified\nDataFrame that shows only the columns which have differences.\n\nThe function first creates a copy of the input DataFrame to work with. It\nthen iterates over each column in the DataFrame and tries to calculate the\nnumber of unique values in that column. If successful, it adds the column\nname and number of unique values to a list of good results. If there is an\nerror, it attempts to apply json.dumps to the column and then calculate the\nnumber of unique values again. If this is successful, it also adds the\ncolumn name and number of unique values to the list of good results. If\nthere is still an error, it adds the column name and the error to a list of\nerrors.\n\nAfter processing all columns, the function removes any columns that had\nerrors from the DataFrame. It then sets the index of the DataFrame to 'id'\nand filters out any columns that have only one unique value. The modified\nDataFrame is then returned.\n\n**Arguments**:\n\n- `df` _pd.DataFrame_ - The input DataFrame to analyze\n  \n\n**Returns**:\n\n  pd.DataFrame"
        },
        "type": "function"
      },
      {
        "args": [],
        "return_type": "JobArguments",
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
          "lineno": 190
        },
        "name": "parse_job_arguments",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
            "lineno": 190
          },
          "content": "Parse command-line arguments for submitting a job to a bamboost database.\n\n**Returns**:\n\n- `JobArguments` - A named tuple containing the parsed arguments."
        },
        "type": "function"
      },
      {
        "args": [],
        "return_type": "ScriptArguments",
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
          "lineno": 210
        },
        "name": "parse_script_arguments",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
            "lineno": 210
          },
          "content": "Parse command-line arguments for a script using the bamboost system.\n\n**Returns**:\n\n- `ScriptArguments` - A named tuple containing the parsed arguments."
        },
        "type": "function"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
      "lineno": 10
    },
    "name": "/home/florez/work/code/bamboost/bamboost.common.utilities",
    "docstring": {
      "location": {
        "filename": "/home/florez/work/code/bamboost/bamboost/common/utilities.py",
        "lineno": 10
      },
      "content": "Utility functions used by bamboost."
    }
  },
  {
    "members": [
      {
        "args": [
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
              "lineno": 48
            },
            "name": "file",
            "type": "POSITIONAL",
            "datatype": "str"
          },
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
              "lineno": 49
            },
            "name": "mode",
            "type": "POSITIONAL",
            "datatype": "Literal[\"mpio\"] | Type[None]"
          },
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
              "lineno": 50
            },
            "name": "driver",
            "type": "POSITIONAL",
            "datatype": "bool | Type[None]",
            "default_value": "None"
          },
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
              "lineno": 51
            },
            "name": "comm",
            "type": "POSITIONAL",
            "default_value": "None"
          }
        ],
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
          "lineno": 47
        },
        "name": "open_h5file",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
            "lineno": 52
          },
          "content": "Open h5 file. Waiting if file is not available.\n\n**Arguments**:\n\n- `file` _str_ - File to open\n- `mode` _str_ - 'r', 'a', 'w', ...\n- `driver` _str_ - driver for h5.File\n- `comm` - MPI communicator"
        },
        "type": "function"
      },
      {
        "args": [
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
              "lineno": 73
            },
            "name": "mode",
            "type": "POSITIONAL",
            "datatype": "str",
            "default_value": "\"r\""
          },
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
              "lineno": 73
            },
            "name": "driver",
            "type": "POSITIONAL",
            "default_value": "None"
          },
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
              "lineno": 73
            },
            "name": "comm",
            "type": "POSITIONAL",
            "default_value": "None"
          }
        ],
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
          "lineno": 73
        },
        "name": "with_file_open",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
            "lineno": 73
          },
          "content": "Open the file (`self._file`) before function\nClose the file after the function call\n\nWorks on classes containing the member `_file` of type :class:`~bamboost.common.file_handler.FileHandler`"
        },
        "type": "function"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
                  "lineno": 133
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
                  "lineno": 133
                },
                "name": "mode",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "\"r\""
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
                  "lineno": 133
                },
                "name": "driver",
                "type": "POSITIONAL",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
                  "lineno": 133
                },
                "name": "comm",
                "type": "POSITIONAL",
                "default_value": "None"
              }
            ],
            "return_type": "FileHandler",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
              "lineno": 133
            },
            "name": "__call__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
                "lineno": 133
              },
              "content": "Used to set the options for file opening.\nExample: `with sim._file('a', driver='mpio') as file:`"
            },
            "type": "function"
          }
        ],
        "bases": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
          "lineno": 103
        },
        "name": "FileHandler",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
            "lineno": 103
          },
          "content": "File handler for an hdf5 file with the purpose of handling opening and closing\nof the file. We use the concept of composition to include an object of this type\nin classes which need access to an hdf5 file (such as the hdf5pointer and Simulation.)\n\n**Arguments**:\n\n- `file_name` - the path to the file\n  \n\n**Attributes**:\n\n- `file_object` - the h5py file object (accessible if open)\n- `_lock` - lock is kind of a stack. `open` increases the stack. `close` decreases\n  the stack. file_object is only closed if the stack is at 0. Ensures consecutive\n  method calls works. Would be a problem if the file is closed after each\n  sub-operation.\n- `_mode` - file mode\n- `_driver` - file driver\n- `_comm` - MPI communicator"
        },
        "type": "class"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/common/file_handler.py",
      "lineno": 9
    },
    "name": "/home/florez/work/code/bamboost/bamboost.common.file_handler"
  },
  {
    "members": [],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/extensions/__init__.py",
      "lineno": 1
    },
    "name": "/home/florez/work/code/bamboost/bamboost.extensions"
  },
  {
    "members": [
      {
        "args": [],
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/extensions/slurm.py",
          "lineno": 67
        },
        "name": "install",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/extensions/slurm.py",
            "lineno": 67
          },
          "content": "Install the slurm extension to the SimulationWriter class. Extends the\n__exit__ method to add slurm metadata."
        },
        "type": "function"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/extensions/slurm.py",
      "lineno": 10
    },
    "name": "/home/florez/work/code/bamboost/bamboost.extensions.slurm"
  },
  {
    "members": [
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
                  "lineno": 49
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
                  "lineno": 50
                },
                "name": "name",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
                  "lineno": 51
                },
                "name": "func",
                "type": "POSITIONAL",
                "datatype": "fe.Function"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
                  "lineno": 52
                },
                "name": "time",
                "type": "POSITIONAL",
                "datatype": "float",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
                  "lineno": 53
                },
                "name": "mesh",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
                  "lineno": 54
                },
                "name": "dtype",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
                  "lineno": 55
                },
                "name": "center",
                "type": "POSITIONAL",
                "datatype": "Literal[\"Node\", \"Cell\"]",
                "default_value": "\"Node\""
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
              "lineno": 48
            },
            "name": "add_field",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
                "lineno": 56
              },
              "content": "Add a dataset to the file. The data is stored at `data/`.\n\n**Arguments**:\n\n- `name` - Name for the dataset\n- `func` - FEniCS function to store\n- `time` - Optional. time\n- `mesh` - Optional. Linked mesh for this data\n- `dtype` - Optional. Numpy style datatype, see h5py documentation,\n  defaults to the dtype of the vector\n- `center` - Optional. Center of the data. Can be 'Node' or 'Cell'.\n  Default is 'Node'."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
                  "lineno": 214
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
                  "lineno": 214
                },
                "name": "mesh",
                "type": "POSITIONAL",
                "datatype": "fe.Mesh"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
                  "lineno": 214
                },
                "name": "mesh_name",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "None"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
              "lineno": 214
            },
            "name": "add_mesh",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
                "lineno": 214
              },
              "content": "Add the mesh to file using fe.HDF5File. I can't figure out how to\nextract the local mesh data in correct order when running in parallel.\n\n**Arguments**:\n\n- `mesh` - FEniCS mesh object\n- `mesh_name` - name for mesh (default = `mesh`)"
            },
            "type": "function"
          }
        ],
        "bases": ["SimulationWriter"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
          "lineno": 29
        },
        "name": "FenicsWriter",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
            "lineno": 29
          },
          "content": "Helper writer for input from FEniCS directly.\n\n**Arguments**:\n\n- `uid` - Unique identifier for the simulation\n- `path` - Path to database\n- `comm` - MPI communicator"
        },
        "type": "class"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/extensions/fenics.py",
      "lineno": 10
    },
    "name": "/home/florez/work/code/bamboost/bamboost.extensions.fenics"
  },
  {
    "members": [
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 123
                },
                "name": "cls",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 123
                },
                "name": "args",
                "type": "POSITIONAL_REMAINDER"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 123
                },
                "name": "kwargs",
                "type": "KEYWORD_REMAINDER"
              }
            ],
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
              "lineno": 123
            },
            "name": "__new__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                "lineno": 123
              },
              "content": "Override the __new__ method to avoid the singleton pattern of IndexAPI."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 143
                },
                "name": "cls",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "list",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 142
                },
                "name": "classmethod"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
              "lineno": 143
            },
            "name": "list",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                "lineno": 143
              },
              "content": "List all remote servers."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 158
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 158
                },
                "name": "id",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "RemoteManager",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
              "lineno": 158
            },
            "name": "__getitem__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                "lineno": 158
              },
              "content": "Return a `RemoteManager` for the given id."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 163
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "subprocess.Popen",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
              "lineno": 163
            },
            "name": "fetch_index",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                "lineno": 163
              },
              "content": "Fetch the index from the remote server."
            },
            "type": "function"
          }
        ],
        "bases": ["IndexAPI", "SQLiteHandler"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
          "lineno": 103
        },
        "name": "Remote",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
            "lineno": 103
          },
          "content": "Access bamboost database of a remote server. The index is fetched using\nrsync over ssh. The `remote_name` can be a hostname or an IP address. Make\nsure that ssh keys are set and working, as there is no user authentication.\nThe `skip_update` flag can be set to avoid fetching the index from the\nremote server.\n\n**Arguments**:\n\n  - remote_name (str): The hostname or IP address of the remote server.\n  - skip_update (bool): Flag to avoid fetching the index from the remote\n  server. Default is False.\n  \n\n**Example**:\n\n  >>> remote = Remote(\"euler\")\n  >>> remote.read_table()\n  returns a pandas DataFrame of the remote index.\n  >>> remote[\"<id>\"]\n  returns a RemoteManager object for the given id."
        },
        "type": "class"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 200
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
              "lineno": 200
            },
            "name": "sync",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                "lineno": 200
              },
              "content": "Don't sync a remote database."
            },
            "type": "function"
          }
        ],
        "bases": ["DatabaseTable"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
          "lineno": 199
        },
        "name": "RemoteDatabaseTable",
        "type": "class"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 217
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 218
                },
                "name": "id",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 219
                },
                "name": "remote",
                "type": "POSITIONAL",
                "datatype": "Remote"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 220
                },
                "name": "comm",
                "type": "POSITIONAL",
                "datatype": "MPI.Comm",
                "default_value": "MPI.COMM_WORLD"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
              "lineno": 216
            },
            "name": "__init__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                "lineno": 221
              },
              "content": "params\nskip_update: if True, does not lookup the new database on the remote:"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 291
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 291
                },
                "name": "uid",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 291
                },
                "name": "return_writer",
                "type": "POSITIONAL",
                "datatype": "bool",
                "default_value": "False"
              }
            ],
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
              "lineno": 291
            },
            "name": "sim",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                "lineno": 291
              },
              "content": "Return simulation object.\n\n**Arguments**:\n\n  - uid (str): the unique id of the sim to be transferred.\n  - return_writer (bool): Flag to indicate whether to return a writer\n  object. Default is False.\n  \n  This method checks if the data for the given uid is already in the\n  local cache. If not, it transfers the data from a remote location using\n  rsync. The method then calls the superclass method to perform further\n  operations on the transferred data."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 351
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 351
                },
                "name": "uid",
                "type": "POSITIONAL",
                "datatype": "str | None",
                "default_value": "None"
              }
            ],
            "return_type": "RemoteManager",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
              "lineno": 351
            },
            "name": "rsync",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                "lineno": 351
              },
              "content": "Transfer data using rsync. Wait for the process to finish and return\nself.\n\n**Arguments**:\n\n- `uid` - The unique id of the simulation to be transferred. If None,\n  all simulations are synced."
            },
            "type": "function"
          }
        ],
        "bases": ["Manager"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
          "lineno": 205
        },
        "name": "RemoteManager",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
            "lineno": 205
          },
          "content": "Manager class with remote functionality. Constructor takes an existing ID\nof a database on a remote server. The ssh connection must be set up to work\nwithout explicit user authentication. Data is lazily transferred using\nrsync."
        },
        "type": "class"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                  "lineno": 371
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "RemoteSimulation",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
              "lineno": 371
            },
            "name": "sync",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
                "lineno": 371
              },
              "content": "Sync the simulation data with the remote server."
            },
            "type": "function"
          }
        ],
        "bases": ["Simulation"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
          "lineno": 366
        },
        "name": "RemoteSimulation",
        "type": "class"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/extensions/remote_manager.py",
      "lineno": 10
    },
    "name": "/home/florez/work/code/bamboost/bamboost.extensions.remote_manager"
  },
  {
    "members": [
      {
        "args": [
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/use_locking.py",
              "lineno": 34
            },
            "name": "lock_type",
            "type": "POSITIONAL",
            "datatype": "Literal[\"shared\", \"exclusive\"]"
          }
        ],
        "return_type": "Callable[..., Tuple[h5py.File, BufferedReader]]",
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/extensions/use_locking.py",
          "lineno": 33
        },
        "name": "get_lock_and_open_function",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/extensions/use_locking.py",
            "lineno": 35
          },
          "content": "Returns a function that locks and opens an HDF5 file with the specified\nlock type.\n\nThe returned function acquires a lock on the lock file and opens the HDF5\nfile, returning both the opened HDF5 file object and the lock file object.\n\nThe returned function takes the following parameters:\n\n| Argument  | Description                                                                 |\n|-----------|-----------------------------------------------------------------------------|\n| file      | The path to the HDF5 file to open.                                          |\n| lock_file | The path to the lock file.                                                  |\n| mode      | The mode to open the file in (e.g., 'r', 'w', 'a').                         |\n| driver    | The HDF5 driver to use (e.g., 'mpio' for MPI-IO).                           |\n| comm      | The MPI communicator (only used with 'mpio' driver).                        |\n\n**Arguments**:\n\n- `lock_type` _Literal[\"shared\", \"exclusive\"]_ - The type of lock to use.\n  \n\n**Returns**:\n\n- `Callable` - A function that locks and opens an HDF5 file."
        },
        "type": "function"
      },
      {
        "args": [
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/use_locking.py",
              "lineno": 73
            },
            "name": "h5_file",
            "type": "POSITIONAL",
            "datatype": "h5py.File"
          },
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/use_locking.py",
              "lineno": 73
            },
            "name": "lock_file",
            "type": "POSITIONAL",
            "datatype": "BufferedReader"
          }
        ],
        "return_type": "None",
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/extensions/use_locking.py",
          "lineno": 73
        },
        "name": "close_and_unlock",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/extensions/use_locking.py",
            "lineno": 73
          },
          "content": "Close an HDF5 file and release the associated file lock.\n\nThis function performs the following operations:\n1. Closes the given HDF5 file.\n2. Releases the lock on the lock file.\n3. Closes the lock file.\n\n**Arguments**:\n\n- `h5_file` - The HDF5 file object to be closed.\n- `lock_file` - The lock file object to be unlocked and closed.\n  \n\n**Returns**:\n\n  None"
        },
        "type": "function"
      },
      {
        "args": [
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/extensions/use_locking.py",
              "lineno": 155
            },
            "name": "lock_type",
            "type": "POSITIONAL",
            "datatype": "Literal[\"shared\", \"exclusive\"]"
          }
        ],
        "return_type": "None",
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/extensions/use_locking.py",
          "lineno": 155
        },
        "name": "use_locking",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/extensions/use_locking.py",
            "lineno": 155
          },
          "content": "Installs a primitive locking mechanism for FileHandler operations.\n\nThis function modifies the FileHandler class to include file locking\ncapabilities, ensuring thread-safe access to files. It wraps the\n`__init__`, `open`, and `close` methods of FileHandler with locking mechanisms.\n\nUsage:\nCall this function before using FileHandler to enable locking:\nuse_locking(\"shared\")  # or use_locking(\"exclusive\")\n\n**Notes**:\n\n  This function should be called only once, preferably at the start\n  of your program, before any FileHandler instances are created.\n  \n\n**Notes**:\n\n  You should only need this functionality if you are using HDF5 <= 1.10.6.\n  The newer versions of HDF5 (>= 1.10.7) have built-in file locking.\n  \n\n**Arguments**:\n\n- `lock_type` _Literal[\"shared\", \"exclusive\"]_ - The type of lock to use.\n  - \"shared\" allows multiple processes to open the file simultaneously.\n  - \"exclusive\" allows only one reader or writer at a time."
        },
        "type": "function"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/extensions/use_locking.py",
      "lineno": 1
    },
    "name": "/home/florez/work/code/bamboost/bamboost.extensions.use_locking",
    "docstring": {
      "location": {
        "filename": "/home/florez/work/code/bamboost/bamboost/extensions/use_locking.py",
        "lineno": 1
      },
      "content": "This module provides a custom rather primitive file locking mechanism for\nHDF5 files.\n\nThis module provides a function `use_locking` that installs the mechanism by\nMonkey-patching the `FileHandler` class. To use this mechanism, call the\n`use_locking` function at the start of your script, before creating any\n`bamboost.common.file_handler.FileHandler` instances.\n\n**Example**:\n\n  >>> from bamboost.extensions.use_locking import use_locking\n  >>> use_locking(\"shared\")"
    }
  },
  {
    "members": [],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/_config.py",
      "lineno": 1
    },
    "name": "/home/florez/work/code/bamboost/bamboost._config",
    "docstring": {
      "location": {
        "filename": "/home/florez/work/code/bamboost/bamboost/_config.py",
        "lineno": 1
      },
      "content": "The module includes functions to copy an example config file to the user's\nconfig directory and load the config file from the directory. If the config\nfile does not exist, a copy of the example config file will be created.\n\nFunctions:\n- _copy_config_file(): Copies the example config file to the user's config\ndirectory.\n- _load_config_file(): Loads the config file from the user's config\ndirectory.\n\n**Attributes**:\n\n  - paths: A dictionary containing paths to the config files.\n  - config: A dictionary of the config. Initiated from config file."
    }
  },
  {
    "members": [
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 68
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "SimulationWriter",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
              "lineno": 68
            },
            "name": "initialize",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                "lineno": 68
              },
              "content": "Create a new file for this simlation.\nThis deletes an existing h5 file of the simulation and creates an empty new one"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 78
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
              "lineno": 78
            },
            "name": "add_metadata",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                "lineno": 78
              },
              "content": "Add metadata to h5 file."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 92
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 92
                },
                "name": "parameters",
                "type": "POSITIONAL",
                "datatype": "dict"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
              "lineno": 92
            },
            "name": "add_parameters",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                "lineno": 92
              },
              "content": "Add parameters to simulation.\n\n**Arguments**:\n\n- `parameters` - Dictionary with parameters."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 114
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 114
                },
                "name": "coordinates",
                "type": "POSITIONAL",
                "datatype": "np.ndarray"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 114
                },
                "name": "connectivity",
                "type": "POSITIONAL",
                "datatype": "np.ndarray"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 114
                },
                "name": "mesh_name",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "None"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
              "lineno": 113
            },
            "name": "add_mesh",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                "lineno": 115
              },
              "content": "Add the mesh to file. Currently only 2d meshes.\n\n**Notes**:\n\n  If you are working with FEniCS, you can use the\n  `bamboost.extensions.fenics.FenicsWriter` writer. With it you can\n  write the FEniCS mesh directly.\n\n**Arguments**:\n\n- `coordinates` - Coordinates as array (nb_nodes, dim)\n- `connectivity` - Connectivity matrix (nb_cells, nb nodes per cell)\n- `mesh_name` - name for mesh (default = `mesh`)"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 172
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 173
                },
                "name": "name",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 174
                },
                "name": "vector",
                "type": "POSITIONAL",
                "datatype": "np.array"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 175
                },
                "name": "time",
                "type": "POSITIONAL",
                "datatype": "float",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 176
                },
                "name": "mesh",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 177
                },
                "name": "dtype",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 178
                },
                "name": "center",
                "type": "POSITIONAL",
                "datatype": "Literal[\"Node\", \"Cell\"]",
                "default_value": "\"Node\""
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
              "lineno": 171
            },
            "name": "add_field",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                "lineno": 179
              },
              "content": "Add a dataset to the file. The data is stored at `data/`.\n\n**Arguments**:\n\n- `name` - Name for the dataset\n- `vector` - Dataset\n- `time` - Optional. time\n- `mesh` - Optional. Linked mesh for this data\n- `dtype` - Optional. Numpy style datatype, see h5py documentation,\n  defaults to the dtype of the vector.\n- `center` - Optional. Center of the data. Can be 'Node' or 'Cell'.\n  Default is 'Node'."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 246
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 247
                },
                "name": "fields",
                "type": "POSITIONAL",
                "datatype": "Dict[str, np.ndarray | Tuple[np.ndarray, str]]"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 248
                },
                "name": "time",
                "type": "POSITIONAL",
                "datatype": "float",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 249
                },
                "name": "mesh",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "None"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
              "lineno": 245
            },
            "name": "add_fields",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                "lineno": 250
              },
              "content": "Add multiple fields at once.\n\n**Arguments**:\n\n- `fields` - Dictionary with fields. The value can be a tuple with the\n  data and a string \"Node\" or \"Cell\".\n- `time` - Optional. time"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 265
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 265
                },
                "name": "name",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 265
                },
                "name": "value",
                "type": "POSITIONAL",
                "datatype": "Any"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 265
                },
                "name": "dtype",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "None"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
              "lineno": 265
            },
            "name": "add_global_field",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                "lineno": 265
              },
              "content": "Add a gobal field. These are stored at `globals/` as an array in a\nsingle dataset.\n\n**Arguments**:\n\n- `name` - Name for the data\n- `value` - Data. Can be a numpy array or a single value."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 312
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 312
                },
                "name": "fields",
                "type": "POSITIONAL",
                "datatype": "Dict[str, Any]"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
              "lineno": 312
            },
            "name": "add_global_fields",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                "lineno": 312
              },
              "content": "Add multiple global fields at once.\n\n**Arguments**:\n\n- `fields` - Dictionary with fields"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 321
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
              "lineno": 321
            },
            "name": "finish_step",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                "lineno": 321
              },
              "content": "Finish step. Adds 1 to the step counter."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 329
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 329
                },
                "name": "repo_path",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "\"./\""
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
              "lineno": 329
            },
            "name": "register_git_attributes",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                "lineno": 329
              },
              "content": "Register git information for given repo.\n\n**Arguments**:\n\n- `repo_path` _`str`_ - path to git repository"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 355
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 355
                },
                "name": "script_path",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
              "lineno": 355
            },
            "name": "copy_executable",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                "lineno": 355
              },
              "content": "WILL BE REMOVED. USE COPY_FILE.\nCopy an executable to directory for reproducability.\n\n**Arguments**:\n\n- `script_path` - path to script"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 365
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 365
                },
                "name": "source",
                "type": "POSITIONAL",
                "datatype": "Union[str, list]"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                  "lineno": 365
                },
                "name": "destination",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "\"\""
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
              "lineno": 365
            },
            "name": "copy_file",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
                "lineno": 365
              },
              "content": "Copy a file to the datafolder.\n\n**Arguments**:\n\n- `source` - path to file, or list of files\n- `destination` - destination (will create intermediatory directories)"
            },
            "type": "function"
          }
        ],
        "bases": ["Simulation"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
          "lineno": 31
        },
        "name": "SimulationWriter",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
            "lineno": 31
          },
          "content": "The SimulationWriter is the writer object for a single simulation. It inherits\nall reading methods from :class:`Simulation`.\n\nThis class can be used as a context manager. When entering the context, the status\nof the simulation is changed to \"Started\". When an exception is raised inside the\ncontext, the status is changed to \"Failed [Exception]\".\n\n**Arguments**:\n\n- `uid` - The identifier of the simulation\n- `path` - The (parent) database path\n- `comm` - An MPI communicator (Default: `MPI.COMM_WORLD`)"
        },
        "type": "class"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/simulation_writer.py",
      "lineno": 10
    },
    "name": "/home/florez/work/code/bamboost/bamboost.simulation_writer"
  },
  {
    "members": [
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                  "lineno": 68
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                  "lineno": 68
                },
                "name": "points_location",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                  "lineno": 68
                },
                "name": "cells_location",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
              "lineno": 68
            },
            "name": "write_points_cells",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                "lineno": 68
              },
              "content": "Write the mesh to the xdmf file.\n\n**Arguments**:\n\n- `points` _str_ - String to geometry/nodes in h5 file\n- `cells` _str_ - String to topology/cells in h5 file"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                  "lineno": 135
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                  "lineno": 135
                },
                "name": "collection",
                "type": "POSITIONAL",
                "datatype": "ET.Element"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                  "lineno": 135
                },
                "name": "fields",
                "type": "POSITIONAL",
                "datatype": "list"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                  "lineno": 135
                },
                "name": "step",
                "type": "POSITIONAL",
                "datatype": "int"
              }
            ],
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
              "lineno": 135
            },
            "name": "write_step",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                "lineno": 135
              },
              "content": "Write the data array for time t.\n\n**Arguments**:\n\n- `t` _float_ - time\n- `data_location` _str_ - String to data in h5 file\n- `name` _str_ - Name for the field in the Xdmf file"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                  "lineno": 159
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                  "lineno": 159
                },
                "name": "grid",
                "type": "POSITIONAL",
                "datatype": "ET.Element"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                  "lineno": 159
                },
                "name": "field_name",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                  "lineno": 159
                },
                "name": "name",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                  "lineno": 159
                },
                "name": "step",
                "type": "POSITIONAL",
                "datatype": "int"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
              "lineno": 158
            },
            "name": "write_attribute",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
                "lineno": 160
              },
              "content": "Write an attribute/field."
            },
            "type": "function"
          }
        ],
        "bases": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
          "lineno": 32
        },
        "name": "XDMFWriter",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
            "lineno": 32
          },
          "content": "Write xdmf file for a subset of the stored data in the H5 file.\n\n**Arguments**:\n\n- `filename` _str_ - xdmf file path\n- `h5file` _str_ - h5 file path"
        },
        "type": "class"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/xdmf.py",
      "lineno": 10
    },
    "name": "/home/florez/work/code/bamboost/bamboost.xdmf"
  },
  {
    "members": [
      {
        "args": [
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
              "lineno": 98
            },
            "name": "func",
            "type": "POSITIONAL"
          }
        ],
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
          "lineno": 98
        },
        "name": "with_connection",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
            "lineno": 98
          },
          "content": "Decorator to ensure that the cursor is available. If the cursor is not\navailable, the connection is opened and closed after the function is\nexecuted."
        },
        "type": "function"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
                  "lineno": 176
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
                  "lineno": 178
                },
                "name": "force_close",
                "type": "KEYWORD_ONLY",
                "datatype": "bool",
                "default_value": "False"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
                  "lineno": 179
                },
                "name": "ensure_commit",
                "type": "KEYWORD_ONLY",
                "datatype": "bool",
                "default_value": "False"
              }
            ],
            "return_type": "Generator[Self]",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
                  "lineno": 174
                },
                "name": "contextmanager"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
              "lineno": 175
            },
            "name": "open",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
                "lineno": 180
              },
              "content": "The open method is used as a context manager.\n\n**Arguments**:\n\n  - ensure_commit (bool, optional): Ensure that the connection is\n  committed. Defaults to False.\n  \n\n**Example**:\n\n  >>> with index.open() as table:\n  >>>     table._cursor.execute(\"SELECT * FROM database\")"
            },
            "type": "function"
          }
        ],
        "bases": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
          "lineno": 115
        },
        "name": "SQLiteHandler",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
            "lineno": 115
          },
          "content": "Class to handle sqlite databases."
        },
        "type": "class"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
      "lineno": 9
    },
    "name": "/home/florez/work/code/bamboost/bamboost._sqlite_database",
    "docstring": {
      "location": {
        "filename": "/home/florez/work/code/bamboost/bamboost/_sqlite_database.py",
        "lineno": 9
      },
      "content": "This module provides a class to handle sqlite databases."
    }
  },
  {
    "members": [
      {
        "value": "\".BAMBOOST-\"",
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
          "lineno": 54
        },
        "name": "PREFIX",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
            "lineno": 55
          },
          "content": "prefix for databaseID identifier file"
        },
        "type": "data"
      },
      {
        "value": "\"DOT\"",
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
          "lineno": 57
        },
        "name": "DOT_REPLACEMENT",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
            "lineno": 58
          },
          "content": "replace dots with this in column names for sqlite"
        },
        "type": "data"
      },
      {
        "members": [],
        "bases": ["Exception"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
          "lineno": 69
        },
        "name": "DatabaseNotFoundError",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
            "lineno": 69
          },
          "content": "Exception raised when a database is not found in the index."
        },
        "type": "class"
      },
      {
        "value": "sql.sqlite3.Error",
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
          "lineno": 79
        },
        "name": "Error",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
            "lineno": 80
          },
          "content": "Error exception for index errors."
        },
        "type": "data"
      },
      {
        "members": [],
        "bases": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
          "lineno": 83
        },
        "name": "Null",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
            "lineno": 83
          },
          "content": "Null object to replace API classes for off-root processes."
        },
        "type": "class"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 164
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 163
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 164
            },
            "name": "create_index_table",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 164
              },
              "content": "Create the index table if it does not exist."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 170
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 170
                },
                "name": "id",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "DatabaseTable",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 170
            },
            "name": "get_database_table",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 170
              },
              "content": "Get the table of a database.\n\n**Arguments**:\n\n  - id (str): ID of the database"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 179
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 179
                },
                "name": "args",
                "type": "POSITIONAL_REMAINDER"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 179
                },
                "name": "kwargs",
                "type": "KEYWORD_REMAINDER"
              }
            ],
            "return_type": "pd.DataFrame",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 178
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 179
            },
            "name": "read_table",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 179
              },
              "content": "Read the index table.\n\n**Returns**:\n\n- `pd.DataFrame` - index table"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 188
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 188
                },
                "name": "query",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 188
                },
                "name": "args",
                "type": "POSITIONAL_REMAINDER"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 188
                },
                "name": "kwargs",
                "type": "KEYWORD_REMAINDER"
              }
            ],
            "return_type": "pd.DataFrame",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 187
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 188
            },
            "name": "fetch",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 188
              },
              "content": "Query the index table.\n\n**Arguments**:\n\n- `query` _str_ - query string"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 198
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 198
                },
                "name": "id",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "str",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 197
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 198
            },
            "name": "get_path",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 198
              },
              "content": "Get the path of a database from its ID.\n\n**Arguments**:\n\n- `id` _str_ - ID of the database\n  \n\n**Returns**:\n\n- `str` - path of the database"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 230
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 230
                },
                "name": "id",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 230
                },
                "name": "path",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "None",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 229
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 230
            },
            "name": "insert_path",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 230
              },
              "content": "Insert a database path into the index.\n\n**Arguments**:\n\n- `id` _str_ - ID of the database\n- `path` _str_ - path of the database"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 241
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 241
                },
                "name": "path",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "str",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 240
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 241
            },
            "name": "get_id",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 241
              },
              "content": "Get the ID of a database from its path.\n\n**Arguments**:\n\n- `path` _str_ - path of the database\n  \n\n**Returns**:\n\n- `str` - ID of the database\n  \n\n**Raises**:\n\n- `DatabaseNotFoundError` - if the database is not found in the index"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 261
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "dict",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 260
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 261
            },
            "name": "scan_known_paths",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 261
              },
              "content": "Scan known paths for databases and update the index."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 274
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 274
                },
                "name": "func",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "Callable",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 274
            },
            "name": "commit_once",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 274
              },
              "content": "Decorator to bundle changes to a single commit.\n\n**Example**:\n\n  >>> @Index.commit_once\n  >>> def create_a_bunch_of_simulations():\n  >>>     for i in range(1000):\n  >>>         db.create_simulation(parameters={...})\n  >>>\n  >>> create_a_bunch_of_simulations()"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 293
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 293
                },
                "name": "purge",
                "type": "POSITIONAL",
                "datatype": "bool",
                "default_value": "False"
              }
            ],
            "return_type": "IndexAPI",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 292
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 293
            },
            "name": "clean",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 293
              },
              "content": "Clean the index from wrong paths.\n\n**Arguments**:\n\n- `purge` _bool, optional_ - Also deletes the table of unmatching uid/path pairs. Defaults to False."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 322
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 322
                },
                "name": "id",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "None",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 321
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 322
            },
            "name": "drop_path",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 322
              },
              "content": "Drop a path from the index.\n\n**Arguments**:\n\n- `id` _str_ - ID of the database"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 330
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 330
                },
                "name": "id",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 330
                },
                "name": "path",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "bool",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 330
            },
            "name": "check_path",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 330
              },
              "content": "Check if path is going to the correct database."
            },
            "type": "function"
          }
        ],
        "bases": ["sql.SQLiteHandler"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
          "lineno": 107
        },
        "name": "IndexAPI",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
            "lineno": 107
          },
          "content": "SQLite database to store database ID, path lookup. As well as the table for\neach database. Location: `~/.local/share/bamboost/bamboost.db`.\nSingleton pattern.\n\n**Arguments**:\n\n- `_file` - path to the database file\n- `convert_arrays` - Defaults to True. If False, when reading from the database,\n  lists with tag ARRAY are not converted back to numpy arrays but\n  remain a standard list."
        },
        "type": "class"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 381
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "pd.DataFrame",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 380
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 381
            },
            "name": "read_table",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 381
              },
              "content": "Read the table of the database.\n\n**Returns**:\n\n- `pd.DataFrame` - table of the database"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 394
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 394
                },
                "name": "entry_id",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "pd.Series",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 393
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 394
            },
            "name": "read_entry",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 394
              },
              "content": "Read an entry from the database.\n\n**Arguments**:\n\n- `entry_id` _str_ - ID of the entry\n  \n\n**Returns**:\n\n- `pd.Series` - entry from the database"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 412
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 412
                },
                "name": "columns",
                "type": "POSITIONAL_REMAINDER",
                "datatype": "str"
              }
            ],
            "return_type": "pd.DataFrame",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 411
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 412
            },
            "name": "read_column",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 412
              },
              "content": "Read columns from the database.\n\n**Arguments**:\n\n- `*columns` _list_ - columns to read\n  \n\n**Returns**:\n\n- `pd.DataFrame` - columns from the database"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 427
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 426
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 427
            },
            "name": "drop_table",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 427
              },
              "content": "Drop the table of the database."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 433
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 432
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 433
            },
            "name": "create_database_table",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 433
              },
              "content": "Create a table for a database."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 447
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 447
                },
                "name": "entry_id",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 447
                },
                "name": "data",
                "type": "POSITIONAL",
                "datatype": "dict"
              }
            ],
            "return_type": "None",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 446
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 447
            },
            "name": "update_entry",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 447
              },
              "content": "Update an entry in the database.\n\n**Arguments**:\n\n- `entry_id` _str_ - ID of the entry\n- `data` _dict_ - data to update"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 503
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 502
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 503
            },
            "name": "sync",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 503
              },
              "content": "Sync the table with the file system."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 538
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 538
                },
                "name": "entry_id",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "Entry",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 537
                },
                "name": "sql",
                "args": ".with_connection"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 538
            },
            "name": "entry",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 538
              },
              "content": "Get the Entry object of an entry.\nMultiton pattern. One Entry per entry."
            },
            "type": "function"
          }
        ],
        "bases": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
          "lineno": 335
        },
        "name": "DatabaseTable",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
            "lineno": 335
          },
          "content": "Class to manage the table of a database. Multiton pattern. One table per\ndatabase."
        },
        "type": "class"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 559
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "dict",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 558
                },
                "name": "property"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 559
            },
            "name": "metadata",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 559
              },
              "content": "Get the metadata of the entry."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 565
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "dict",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 564
                },
                "name": "property"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 565
            },
            "name": "parameters",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 565
              },
              "content": "Get the parameters of the entry."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 578
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "dict",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 578
            },
            "name": "get_all_metadata",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 578
              },
              "content": "Get all metadata of the entry."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 583
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "float",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                  "lineno": 582
                },
                "name": "property"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 583
            },
            "name": "mtime",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
                "lineno": 583
              },
              "content": "Get the modification time of the entry."
            },
            "type": "function"
          }
        ],
        "bases": [],
        "decorations": [
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 547
            },
            "name": "dataclass"
          }
        ],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
          "lineno": 548
        },
        "name": "Entry",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
            "lineno": 548
          },
          "content": "Simulation entry in a database.\nSimplified version of the Simulation class in the simulation module."
        },
        "type": "class"
      },
      {
        "args": [
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 593
            },
            "name": "uid",
            "type": "POSITIONAL"
          },
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 593
            },
            "name": "root_dir",
            "type": "POSITIONAL"
          }
        ],
        "return_type": "list",
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
          "lineno": 593
        },
        "name": "find",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
            "lineno": 593
          },
          "content": "Find the database with UID under given root_dir.\n\n**Arguments**:\n\n- `uid` - UID to search for\n- `root_dir` - root directory for search"
        },
        "type": "function"
      },
      {
        "args": [
          {
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
              "lineno": 609
            },
            "name": "path",
            "type": "POSITIONAL",
            "datatype": "str"
          }
        ],
        "return_type": "str",
        "decorations": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
          "lineno": 609
        },
        "name": "get_uid_from_path",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
            "lineno": 609
          },
          "content": "Returns the UID found in the specified path."
        },
        "type": "function"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
      "lineno": 9
    },
    "name": "/home/florez/work/code/bamboost/bamboost.index",
    "docstring": {
      "location": {
        "filename": "/home/florez/work/code/bamboost/bamboost/index.py",
        "lineno": 9
      },
      "content": "Module to manage the database index and its ID's.\n\n**Attributes**:\n\n- `THREAD_SAFE` - if True, the index is thread safe\n- `CONVERT_ARRAYS` - if True, convert numpy arrays to lists"
    }
  },
  {
    "members": [
      {
        "members": [],
        "bases": ["object"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
          "lineno": 40
        },
        "name": "ManagerFromUID",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
            "lineno": 40
          },
          "content": "Get a database by its UID. This is used for autocompletion in ipython."
        },
        "type": "class"
      },
      {
        "members": [],
        "bases": ["object"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
          "lineno": 58
        },
        "name": "ManagerFromName",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
            "lineno": 58
          },
          "content": "Get a database by its path/name. This is used for autocompletion in ipython."
        },
        "type": "class"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 130
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 130
                },
                "name": "key",
                "type": "POSITIONAL",
                "datatype": "Union[str, int]"
              }
            ],
            "return_type": "Simulation",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 130
            },
            "name": "__getitem__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 130
              },
              "content": "Returns the simulation in the specified row of the dataframe.\n\n**Arguments**:\n\n- `key` - The simulation identifier (`str`) or the row index (`int`).\n\n**Returns**:\n\n  The selected simulation object."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 143
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "str",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 143
            },
            "name": "_repr_html_",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 143
              },
              "content": "HTML repr for ipython/notebooks. Uses string replacement to fill the\ntemplate code."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 228
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "pd.DataFrame",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 227
                },
                "name": "property"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 228
            },
            "name": "df",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 228
              },
              "content": "View of the database and its parametric space.\n\n**Returns**:\n\n  :class:`pd.DataFrame`"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 267
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 267
                },
                "name": "include_linked_sims",
                "type": "POSITIONAL",
                "datatype": "bool",
                "default_value": "False"
              }
            ],
            "return_type": "pd.DataFrame",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 267
            },
            "name": "get_view",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 267
              },
              "content": "View of the database and its parametric space. Read from the sql\ndatabase. If `include_linked_sims` is True, the individual h5 files are\nscanned.\n\n**Arguments**:\n\n- `include_linked_sims` - if True, include the parameters of linked sims\n  \n\n**Examples**:\n\n  >>> db.get_view()\n  >>> db.get_view(include_linked_sims=True)"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 309
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 309
                },
                "name": "include_linked_sims",
                "type": "POSITIONAL",
                "datatype": "bool",
                "default_value": "False"
              }
            ],
            "return_type": "pd.DataFrame",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 308
            },
            "name": "get_view_from_hdf_files",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 310
              },
              "content": "View of the database and its parametric space. Read from the h5\nfiles metadata.\n\n**Arguments**:\n\n- `include_linked_sims` - if True, include the parameters of linked sims"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 338
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "pd.DataFrame",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 337
                },
                "name": "property"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 338
            },
            "name": "data_info",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 338
              },
              "content": "Return view of stored data for all simulations\n\n**Returns**:\n\n  :class:`pd.DataFrame`"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 364
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 365
                },
                "name": "uid",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 366
                },
                "name": "return_writer",
                "type": "POSITIONAL",
                "datatype": "bool",
                "default_value": "False"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 367
                },
                "name": "writer_type",
                "type": "POSITIONAL",
                "datatype": "SimulationWriter",
                "default_value": "SimulationWriter"
              }
            ],
            "return_type": "Simulation",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 363
            },
            "name": "sim",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 368
              },
              "content": "Get an existing simulation with uid. Same as accessing with `db[uid]` directly.\n\n**Arguments**:\n\n- `uid` _`str`_ - unique identifier\n- `return_writer` - if true, return `SimulationWriter`, otherwise\n  return `Simulation`\n- `writer_type` - Optionally, you can specify a custom writer type to return.\n  \n\n**Returns**:\n\n  :class:`~bamboost.simulation.Simulation`"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 385
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 386
                },
                "name": "select",
                "type": "POSITIONAL",
                "datatype": "pd.Series | pd.DataFrame | dict",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 387
                },
                "name": "sort",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 388
                },
                "name": "reverse",
                "type": "POSITIONAL",
                "datatype": "bool",
                "default_value": "False"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 389
                },
                "name": "exclude",
                "type": "POSITIONAL",
                "datatype": "set",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 390
                },
                "name": "return_writer",
                "type": "POSITIONAL",
                "datatype": "bool",
                "default_value": "False"
              }
            ],
            "return_type": "list[Simulation]",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 384
            },
            "name": "sims",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 391
              },
              "content": "Get all simulations in a list. Optionally, get all simulations matching the\ngiven selection using pandas.\n\n**Arguments**:\n\n- `select` - Selection of simulations. Can be one of the following.\n  - Pandas boolean series: A boolean series with the same length as the dataframe.\n  - Pandas DataFrame: A subset of the full dataframe.\n  - Dictionary: A dictionary with the parameters to select (see `find` for details).\n- `sort` _`str`_ - Optionally sort the list with this keyword\n- `reverse` _`bool`_ - swap sort direction\n- `exclude` _`list[str]`_ - sims to exclude\n- `return_writer` - if true, return `SimulationWriter`, otherwise\n  return `Simulation`\n  \n\n**Returns**:\n\n  A list of `:class:~bamboost.simulation.Simulation` objects\n  \n\n**Examples**:\n\n  >>> db.sims(select=db.df[\"status\"] == \"finished\", sort=\"time_stamp\")"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 437
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 438
                },
                "name": "uid",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 439
                },
                "name": "parameters",
                "type": "POSITIONAL",
                "datatype": "dict",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 440
                },
                "name": "skip_duplicate_check",
                "type": "POSITIONAL",
                "datatype": "bool",
                "default_value": "False"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 442
                },
                "name": "prefix",
                "type": "KEYWORD_ONLY",
                "datatype": "str",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 443
                },
                "name": "duplicate_action",
                "type": "KEYWORD_ONLY",
                "datatype": "str",
                "default_value": "\"prompt\""
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 444
                },
                "name": "note",
                "type": "KEYWORD_ONLY",
                "datatype": "str",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 445
                },
                "name": "files",
                "type": "KEYWORD_ONLY",
                "datatype": "list[str]",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 446
                },
                "name": "links",
                "type": "KEYWORD_ONLY",
                "datatype": "dict[str, str]",
                "default_value": "None"
              }
            ],
            "return_type": "SimulationWriter",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 436
            },
            "name": "create_simulation",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 447
              },
              "content": "Get a writer object for a new simulation. This is written for paralell use\nas it is likely that this may be used in an executable, creating multiple runs\nfor a parametric space, which may be run in paralell.\n\n**Arguments**:\n\n- `uid` _`str`_ - The name/uid for the simulation. If not specified, a random id\n  will be assigned.\n- `parameters` _`dict`_ - Parameter dictionary. If provided, the parameters will be\n  checked against the existing sims for duplication. Otherwise, they may be\n  specified later with `bamboost.simulation_writer.SimulationWriter.add_parameters`.\n\n**Notes**:\n\n  The parameters are stored in the h5 file as attributes.\n  - If the value is a dict, it is flattened using\n  `bamboost.common.utilities.flatten_dict`.\n  - If the value is a list/array, it is stored as a dataset.\n- `skip_duplicate_check` _`bool`_ - if True, the duplicate check is skipped.\n- `prefix` _`str`_ - Prefix for the uid. If not specified, no prefix is used.\n- `duplicate_action` _`str`_ - how to deal with duplicates. Replace\n  first duplicate ('r'), Create with altered uid (`c`), Create new\n  with new id (`n`), Abort (`a`) default \"prompt\" for each\n  duplicate on a case by case basis.\n- `note` _`str`_ - Note for the simulation.\n- `files` _`list`_ - List of files to copy to the simulation directory.\n- `links` _`dict`_ - Dictionary of links to other simulations.\n  \n\n**Notes**:\n\n  The files and links are copied to the simulation directory. The files are\n  copied with the same name as the original file. The links are copied with\n  the given name.\n  \n\n**Examples**:\n\n  >>> db.create_simulation(parameters={\"a\": 1, \"b\": 2})\n  \n  >>> db.create_simulation(uid=\"my_sim\", parameters={\"a\": 1, \"b\": 2}, prefix=\"test\")\n  \n\n**Returns**:\n\n  A simulation writer object."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 544
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 544
                },
                "name": "uid",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 544
            },
            "name": "remove",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 544
              },
              "content": "CAUTION, DELETING DATA. Remove the data of a simulation.\n\n**Arguments**:\n\n- `uid` _`str`_ - uid"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 553
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 553
                },
                "name": "parameter_selection",
                "type": "POSITIONAL",
                "datatype": "dict[str, Any]"
              }
            ],
            "return_type": "pd.DataFrame",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 553
            },
            "name": "find",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 553
              },
              "content": "Find simulations with the given parameters.\n\nThe dictionary can contain callables to filter inequalities or other\nfilters.\n\n**Examples**:\n\n  >>> db.find({\"a\": 1, \"b\": lambda x: x > 2})\n  >>> db.find({\"a\": 1, \"b\": 2})\n  \n\n**Arguments**:\n\n- `parameter_selection` _dict_ - parameter selection dictionary"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 685
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "list",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 685
            },
            "name": "global_fields_in_all",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 685
              },
              "content": "Get a list of all global fields in all simulations.\n\n**Returns**:\n\n  List of global fields"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                  "lineno": 700
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "dict",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
              "lineno": 700
            },
            "name": "get_parameters",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
                "lineno": 700
              },
              "content": "Get the parameters used in this database.\n\n**Returns**:\n\n  Dictionary of parameters with it's count, range, and type. Sorted by count."
            },
            "type": "function"
          }
        ],
        "bases": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
          "lineno": 72
        },
        "name": "Manager",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
            "lineno": 72
          },
          "content": "View of database.\n\n**Arguments**:\n\n- `path` _`str`_ - path to the directory of the database. If doesn't exist,\n  a new database will be created.\n- `comm` _`MPI.Comm`_ - MPI communicator\n- `uid` - UID of the database\n  \n\n**Attributes**:\n\n- `FIX_DF` - If False, the dataframe of the database is reconstructed every\n  time it is accessed.\n- `fromUID` - Access a database by its UID\n- `fromName` - Access a database by its path/name\n  \n\n**Example**:\n\n  >>> db = Manager(\"path/to/db\")\n  >>> db.df # DataFrame of the database"
        },
        "type": "class"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/manager.py",
      "lineno": 9
    },
    "name": "/home/florez/work/code/bamboost/bamboost.manager"
  },
  {
    "members": [
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 54
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 54
                },
                "name": "key",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "Simulation",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 53
                },
                "name": "with_file_open",
                "args": "(\"r\", driver=\"mpio\")"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 54
            },
            "name": "__getitem__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 54
              },
              "content": "Returns the linked simulation object."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 58
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 58
                },
                "name": "key",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 58
                },
                "name": "newvalue",
                "type": "POSITIONAL"
              }
            ],
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 58
            },
            "name": "__setitem__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 58
              },
              "content": "Creates the link."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 62
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 62
                },
                "name": "key",
                "type": "POSITIONAL"
              }
            ],
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 62
            },
            "name": "__delitem__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 62
              },
              "content": "Delete a link."
            },
            "type": "function"
          }
        ],
        "bases": ["hdf_pointer.MutableGroup"],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
          "lineno": 40
        },
        "name": "Links",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
            "lineno": 40
          },
          "content": "Link group. Used to create and access links.\n\nI don't know how to distribute this to its own file in the accessors\ndirectory, due to circular imports."
        },
        "type": "class"
      },
      {
        "members": [
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 138
                },
                "name": "cls",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 138
                },
                "name": "full_uid",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 138
                },
                "name": "index_database",
                "type": "KEYWORD_ONLY",
                "datatype": "index.IndexAPI",
                "default_value": "None"
              }
            ],
            "return_type": "Self",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 137
                },
                "name": "classmethod"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 138
            },
            "name": "fromUID",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 138
              },
              "content": "Return the `Simulation` with given UID.\n\n**Arguments**:\n\n- `full_uid` - the full id (Database uid : simulation uid)"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 151
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 151
                },
                "name": "key",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "hdf_pointer.BasePointer",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 150
                },
                "name": "with_file_open",
                "args": "()"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 151
            },
            "name": "__getitem__",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 151
              },
              "content": "Direct access to HDF5 file.\n\n**Returns**:\n\n  :class:`~bamboost.common.file_handler.BasePointer`"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 255
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 255
                },
                "name": "filename",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "str",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 255
            },
            "name": "files",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 255
              },
              "content": "Get the path to the file.\n\n**Arguments**:\n\n- `filename` - name of the file"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 264
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 264
                },
                "name": "level",
                "type": "POSITIONAL",
                "default_value": "-1"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 264
                },
                "name": "limit_to_directories",
                "type": "POSITIONAL",
                "default_value": "False"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 264
                },
                "name": "length_limit",
                "type": "POSITIONAL",
                "default_value": "1000"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 264
                },
                "name": "printit",
                "type": "POSITIONAL",
                "default_value": "True"
              }
            ],
            "return_type": "str",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 263
            },
            "name": "show_files",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 265
              },
              "content": "Show the file tree of the simulation directory.\n\n**Arguments**:\n\n- `level` - how deep to print the tree\n- `limit_to_directories` - only print directories\n- `length_limit` - cutoff"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 281
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 281
            },
            "name": "open_in_file_explorer",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 281
              },
              "content": "Open the simulation directory. Uses `xdg-open` on linux systems."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 288
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 288
            },
            "name": "open_in_paraview",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 288
              },
              "content": "Open the xdmf file in paraview."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 292
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "str",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 292
            },
            "name": "get_full_uid",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 292
              },
              "content": "Returns the full uid of the simulation (including the one of the database)"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 297
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 297
                },
                "name": "status",
                "type": "POSITIONAL",
                "datatype": "str"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 297
            },
            "name": "change_status",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 297
              },
              "content": "Change status of simulation.\n\n**Arguments**:\n\n- `status` _str_ - new status"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 310
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 310
                },
                "name": "update_dict",
                "type": "POSITIONAL",
                "datatype": "dict"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 310
            },
            "name": "update_metadata",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 310
              },
              "content": "Update the metadata attributes.\n\n**Arguments**:\n\n- `update_dict` - dictionary to push"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 323
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 323
                },
                "name": "update_dict",
                "type": "POSITIONAL",
                "datatype": "dict"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 323
            },
            "name": "update_parameters",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 323
              },
              "content": "Update the parameters dictionary.\n\n**Arguments**:\n\n- `update_dict` - dictionary to push"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 336
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 336
                },
                "name": "fields",
                "type": "POSITIONAL",
                "datatype": "list",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 336
                },
                "name": "nb_steps",
                "type": "POSITIONAL",
                "datatype": "int",
                "default_value": "None"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 336
            },
            "name": "create_xdmf_file",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 336
              },
              "content": "Create the xdmf file to read in paraview.\n\n**Arguments**:\n\n- `fields` _list[str]_ - fields for which to write timeseries information,\n  if not specified, all fields in data are written.\n- `nb_steps` _int_ - number of steps the simulation has"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 388
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 389
                },
                "name": "commands",
                "type": "POSITIONAL",
                "datatype": "list[str]"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 390
                },
                "name": "euler",
                "type": "POSITIONAL",
                "datatype": "bool",
                "default_value": "True"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 391
                },
                "name": "sbatch_kwargs",
                "type": "POSITIONAL",
                "datatype": "dict[str, Any]",
                "default_value": "None"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 387
            },
            "name": "create_run_script",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 392
              },
              "content": "Create a batch job and put it into the folder.\n\n**Arguments**:\n\n- `commands` - A list of strings being the user defined commands to run\n- `euler` - If false, a local bash script will be written\n- `sbatch_kwargs` - Additional sbatch arguments.\n  This parameter allows you to provide additional arguments to the `sbatch` command\n  when submitting jobs to a Slurm workload manager. The arguments should be provided\n  in the format of a dict of sbatch option name and values.\n  \n  Use this parameter to specify various job submission options such as the number of\n  tasks, CPU cores, memory requirements, email notifications, and other sbatch options\n  that are not covered by default settings.\n  By default, the following sbatch options are set:\n  - `--output`: The output file is set to `<uid>.out`.\n  - `--job-name`: The job name is set to `<full_uid>`.\n  \n  The following arguments should bring you far:\n  - `--ntasks`: The number of tasks to run. This is the number of MPI processes to start.\n  - `--mem-per-cpu`: The memory required per CPU core.\n  - `--time`: The maximum time the job is allowed to run.\n  - `--tmp`: Temporary scratch space to use for the job."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 460
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 460
            },
            "name": "submit",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 460
              },
              "content": "Submit the job for this simulation."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 495
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 495
                },
                "name": "mode",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "\"r\""
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 495
                },
                "name": "driver",
                "type": "POSITIONAL",
                "default_value": "None"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 495
                },
                "name": "comm",
                "type": "POSITIONAL",
                "default_value": "None"
              }
            ],
            "return_type": "FileHandler",
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 495
            },
            "name": "open",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 495
              },
              "content": "Use this as a context manager in a `with` statement.\nPurpose: keeping the file open to directly access/edit something in the\nHDF5 file of this simulation.\n\n**Arguments**:\n\n- `mode` _`str`_ - file mode (see h5py docs)\n- `driver` _`str`_ - file driver (see h5py docs)\n- `comm` _`str`_ - mpi communicator"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 508
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "Mesh",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 507
                },
                "name": "property"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 508
            },
            "name": "mesh",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 508
              },
              "content": "Return the default mesh.\n\n**Returns**:\n\n  MeshGroup"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 517
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 517
                },
                "name": "mesh_name",
                "type": "POSITIONAL",
                "datatype": "str",
                "default_value": "None"
              }
            ],
            "return_type": "Tuple[np.ndarray, np.ndarray]",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 516
                },
                "name": "with_file_open",
                "args": "(\"r\")"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 517
            },
            "name": "get_mesh",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 517
              },
              "content": "Return coordinates and connectivity. Currently returns numpy arrays.\n\n**Arguments**:\n\n- `mesh_name` _`str`_ - optional, name of mesh to read (default = mesh)\n\n**Returns**:\n\n  Tuple of np.arrays (coordinates, connectivity)"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 540
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "pd.DataFrame",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 537
                },
                "name": "property"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 538
                },
                "name": "deprecated",
                "args": "(\"Use `data.info` instead\")"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 539
                },
                "name": "with_file_open",
                "args": "(\"r\")"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 540
            },
            "name": "data_info",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 540
              },
              "content": "View the data stored.\n\n**Returns**:\n\n  :class:`pd.DataFrame`"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 560
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "dict",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 558
                },
                "name": "property"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 559
                },
                "name": "with_file_open",
                "args": "(\"r\")"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 560
            },
            "name": "git",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 560
              },
              "content": "Get Git information.\n\n**Returns**:\n\n  :class:`dict` with different repositories."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 574
                },
                "name": "self",
                "type": "POSITIONAL"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 574
                },
                "name": "field",
                "type": "POSITIONAL",
                "datatype": "str"
              },
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 574
                },
                "name": "step",
                "type": "POSITIONAL",
                "datatype": "int"
              }
            ],
            "decorations": [],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 574
            },
            "name": "get_data_interpolator",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 574
              },
              "content": "Get Linear interpolator for data field at step. Uses the linked mesh.\n\n**Arguments**:\n\n- `name` _`str`_ - name of the data field\n- `step` _`int`_ - step\n\n**Returns**:\n\n  :class:`scipy.interpolate.LinearNDInterpolator`"
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 590
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "return_type": "None",
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 589
                },
                "name": "with_file_open",
                "args": "()"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 590
            },
            "name": "show_h5tree",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 590
              },
              "content": "Print the tree inside the h5 file."
            },
            "type": "function"
          },
          {
            "args": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 597
                },
                "name": "self",
                "type": "POSITIONAL"
              }
            ],
            "decorations": [
              {
                "location": {
                  "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                  "lineno": 596
                },
                "name": "contextmanager"
              }
            ],
            "location": {
              "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
              "lineno": 597
            },
            "name": "enter_path",
            "docstring": {
              "location": {
                "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
                "lineno": 597
              },
              "content": "A context manager for changing the working directory to this simulations' path.\n\n>>> with sim.working_directory():\n>>>     ..."
            },
            "type": "function"
          }
        ],
        "bases": [],
        "location": {
          "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
          "lineno": 84
        },
        "name": "Simulation",
        "docstring": {
          "location": {
            "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
            "lineno": 84
          },
          "content": "A single dataset/simulation. Used to write to it, read from it or append.\n\n**Arguments**:\n\n- `uid` _str_ - unique identifier\n- `path` _str_ - path to parent/database folder\n- `comm` _MPI.Comm_ - MPI communicator (default=MPI.COMM_WORLD)"
        },
        "type": "class"
      }
    ],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/simulation.py",
      "lineno": 10
    },
    "name": "/home/florez/work/code/bamboost/bamboost.simulation"
  },
  {
    "members": [],
    "location": {
      "filename": "/home/florez/work/code/bamboost/bamboost/_version.py",
      "lineno": 3
    },
    "name": "/home/florez/work/code/bamboost/bamboost._version"
  }
]
