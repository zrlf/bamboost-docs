"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9751],{44:(e,t,i)=>{i.r(t),i.d(t,{ReferenceGuide:()=>f,assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var n=i(5893),a=i(1151);const s=JSON.parse('{"r_":"View of database. ","xB":{"get_view":{"docstring":"View of the database and its parametric space. ","signature":"(self) -> pandas.core.frame.DataFrame","arguments":{"self":{"default":null,"annotation":null,"description":null}}},"sim":{"docstring":"Get an existing simulation with uid. Same as accessing with `db[uid]` directly. ","signature":"(self, uid, return_writer: bool = False) -> bamboost.simulation.Simulation","arguments":{"self":{"default":null,"annotation":null,"description":null},"uid":{"default":null,"annotation":null,"description":"unique identifier"},"return_writer":{"default":"False","annotation":"bool","description":"if true, return `SimulationWriter`, otherwise return `Simulation`"}}},"sims":{"docstring":"Get all simulations in a list. Optionally, get all simulations matching the given selection using pandas.","signature":"(\\n    self,\\n    select: pandas.core.series.Series = None,\\n    sort: str = None,\\n    reverse: bool = False,\\n    exclude: set = None,\\n    return_writer: bool = False\\n) -> list","arguments":{"self":{"default":null,"annotation":null,"description":null},"select":{"default":"None","annotation":"Series","description":"pandas boolean series"},"sort":{"default":"None","annotation":"str","description":"Optionally sort the list with this keyword"},"reverse":{"default":"False","annotation":"bool","description":"swap sort direction"},"exclude":{"default":"None","annotation":"set","description":"sims to exclude"},"return_writer":{"default":"False","annotation":"bool","description":"if true, return `SimulationWriter`, otherwise return `Simulation`"}}},"create_simulation":{"docstring":"Get a writer object for a new simulation. This is written for paralell use as it is likely that this may be used in an executable, creating multiple runs for a parametric space, which may be run in paralell.","signature":"(\\n    self,\\n    uid: str = None,\\n    parameters: dict = None,\\n    skip_duplicate_check: bool = False\\n) -> bamboost.simulation_writer.SimulationWriter","arguments":{"self":{"default":null,"annotation":null,"description":null},"uid":{"default":"None","annotation":"str","description":"The name/uid for the simulation. If not specified, a random id will be assigned."},"parameters":{"default":"None","annotation":"dict","description":"Parameter dictionary. If provided, the parameters will be checked against the existing sims for duplication. Otherwise, they may be specified later with :func:`~bamboost.simulation.SimulationWriter.add_parameters`."},"skip_duplicate_check":{"default":"False","annotation":"bool","description":"if True, the duplicate check is skipped."}}},"remove":{"docstring":"CAUTION, DELETING DATA. Remove the data of a simulation. ","signature":"(self, uid: str) -> None","arguments":{"self":{"default":null,"annotation":null,"description":null},"uid":{"default":null,"annotation":"str","description":"uid"}}},"global_fields_in_all":{"docstring":"Get a list of all global fields in all simulations. ","signature":"(self) -> list","arguments":{"self":{"default":null,"annotation":null,"description":null}}},"get_parameters":{"docstring":"Get the parameters used in this database. ","signature":"(self) -> dict","arguments":{"self":{"default":null,"annotation":null,"description":null}}}}}');var r=i(9286);const l={hide_table_of_contents:!0},o=void 0,u={id:"reference/index",title:"index",description:");",source:"@site/docs/reference/index.md",sourceDirName:"reference",slug:"/reference/",permalink:"/bamboost-docs/docs/reference/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"refSidebar"},d={},c=[],f=()=>{const e={div:"div",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,a.a)()},t=s.xB;return(0,n.jsxs)(e.div,{children:[(0,n.jsx)(e.h1,{children:"Manager"}),(0,n.jsx)(e.p,{children:"Here is the reference guide"}),(0,n.jsx)(e.p,{children:s.r_}),Object.keys(t).map((i=>(0,n.jsxs)(e.div,{children:[(0,n.jsx)(e.h2,{children:i}),(0,n.jsxs)(r.Z,{language:"py",children:[i,t[i].signature]}),(0,n.jsx)(e.p,{children:t[i].docstring}),(0,n.jsx)(e.ul,{children:Object.keys(t[i].arguments).map((a=>(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.h3,{children:a}),(0,n.jsx)(e.p,{children:t[i].arguments[a].description})]})))})]})))]})};function p(e){return(0,n.jsx)(f,{})}function m(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p()}}}]);